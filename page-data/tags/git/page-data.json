{"componentChunkName":"component---node-modules-gatsby-theme-replica-src-templates-tag-tsx","path":"/tags/git","result":{"data":{"allMdx":{"nodes":[{"id":"5e7c3d6d-d72a-594e-8118-3b77a1bbef67","excerpt":"前几天在家写公司的代码，自己电脑上 git 全局设置用的是私人邮箱，太懒了懒得改，直接 commit 以后被公司的 bot check 到是非公司邮箱提交的代码，PR 都不让开，真是很严格呢，气人 😤 以前只知道怎么修改单个 commit 的信息，而且只知道用 git commit --amend 修改最新提交的 commit。学习了一下怎么修改多个 commit…","frontmatter":{"title":"git重写历史","date":"2019-05-15T15:50:46.000Z","tags":["git"]},"fields":{"slug":"/2019/05/15/git-rewrite-history/"},"slug":"20190515-git-rewrite-history"},{"id":"394212c7-0936-5b13-a41d-e978520449b1","excerpt":"前几天刚看到一个 git command:  git bisect ，万万没想到居然这么快就用上了，真是尴尬。更尴尬的是，debug 了半天最后发现是自己的 commit 出问题 😆 在软件开发的过程中，由于测试覆盖率低，没时间回归测试等等原因，经常会遇到一种情况就是，某个 feature 明明前几天还好好的，不知道从什么时候开始就出 Bug 了……然后 hmm…","frontmatter":{"title":"git bisect 二分法查找问题commit","date":"2018-11-29T03:47:01.000Z","tags":["git","二分法","debug","bisect"]},"fields":{"slug":"/2018/11/29/git-bisect/"},"slug":"20181129-git-bisect"},{"id":"4b7e4754-aa05-547e-97de-e4c14cbe6eea","excerpt":"在写程序的过程中，经常遇到一些刚提交了 commit 就发现有个错别字这种尴尬的情况，我以前的做法是 git reset HEAD~1  将 HEAD 指向提交之前的一个 commit 然后改完再重新提交 ‍🤦‍ 除此之外，如果是最新的 commit 中的错误需要修改，其实还可以直接修改，之后使用 git add FILE_TO_CHANGE git comit --amend…","frontmatter":{"title":"使用fixup和auto squash修改git commit","date":"2018-05-21T06:38:40.000Z","tags":["git","fixup","squash","conventional commit","patch"]},"fields":{"slug":"/2018/05/21/fixup-and-auto-squash/"},"slug":"20180521-fixup-and-auto-squash"},{"id":"578d92b0-a6da-5561-b0aa-cf8ed9cb7ab6","excerpt":"为什么需要全局  .gitignore 通常来说，在 repo 中提交跟 IDE 相关的文件并非最佳实践，所以大多数时候会在 .gitignore 中加入 IDE 相关的文件 pattern，然而市面上的 IDE 很多，不同程序员对 IDE 也有着自己的偏好，似乎不太可能把市面上所有的 IDE 都列出来。 除此之外，可能还有一些其他情况下，希望在本地 ignore…","frontmatter":{"title":"global .gitignore","date":"2018-03-27T04:39:44.000Z","tags":["git","gitignore"]},"fields":{"slug":"/2018/03/27/global-gitignore/"},"slug":"20180327-global-gitignore"},{"id":"df1890ef-432e-58d8-b5e7-8e3c09719b01","excerpt":"看了好多讲通过 git 钩子自动部署的，大多讲的绕来绕去乱七八糟思路一点也不清晰…\n做了一晚上实验之后大概明白了是怎么工作的。 裸仓库（bare） 裸仓库跟我们平时 git clone 得到的仓库不太一样，裸仓库其实相当于通过克隆来的仓库里的 .git 文件夹，整个裸仓库中只有 git 索引（index）， 并没有任何代码相关的东西 。要实现 Push to Deploy…","frontmatter":{"title":"如何通过Git钩子自动部署(Push to Deploy)","date":"2016-04-14T10:59:37.000Z","tags":["git","hook","自动部署"]},"fields":{"slug":"/2016/04/14/push-to-deploy-through-git-hook/"},"slug":"20160414-push-to-deploy-through-git-hook"},{"id":"caea34a9-df5f-5f7a-b5fa-91dfffa1deee","excerpt":"我也不想中英文混杂的取标题……但我实在翻译无能… _ (:з」∠) _ 基本知识 在 git 中文件有两类，共三种状态： untracked tracked changes not staged for commit changes to be committed\n我们都知道，在 .gitignore 文件里添加相应的文件夹或文件就能忽略掉不想被 track 的文件。\n但是， .gitignore…","frontmatter":{"title":"git如何ignore已经track的文件","date":"2016-02-01T06:01:03.000Z","tags":["git","gitignore","update index"]},"fields":{"slug":"/2016/02/01/git-how-to-ignore-tracked-files/"},"slug":"20160201-git-how-to-ignore-tracked-files"},{"id":"1ef13807-59bf-5ef9-82a6-f770a1e8f87d","excerpt":"因为我是那种经常改一个错别字就忙着要提交一次的人…所以总是会产生很多无意义的提交，于是合并多个提交为一个就成了我的刚性需求。 关于合并多个提交，主要是要搞清楚 rebase 的用法。 查看提交历史，git log 首先你要知道自己想合并的是哪几个提交，可以使用 git log 命令来查看提交历史，假如最近 4 条历史如下： 历史记录是按照时间排序的，时间近的排在前面。 git rebase…","frontmatter":{"title":"git merge commits 如何合并多个提交为一个","date":"2015-12-24T07:08:49.000Z","tags":["git","merge commits","合并提交"]},"fields":{"slug":"/2015/12/24/how-to-merge-commits-with-git-rebase/"},"slug":"20151224-how-to-merge-commits-with-git-rebase"},{"id":"1dd1ef8c-9454-5ac7-b6c9-ec0804a92f0f","excerpt":"为什么我每天都会有一些奇奇怪怪的需求… 我之前在 github 上用 hexo 搭了一个静态博客，每次 hexo deploy 的时候，就会在 gh-pages 分支提交一个 commit。但是由于 hexo-deployer-git 本身的逻辑是，每次都是强推 push -f ，于是每当我换电脑（比如从家里换到公司里）的时候，我的 commit…","frontmatter":{"title":"git merge repo 如何合并两个仓库","date":"2015-12-24T06:58:32.000Z","tags":["git","merge repo","合并仓库"]},"fields":{"slug":"/2015/12/24/how-to-merge-repos-with-git/"},"slug":"20151224-how-to-merge-repos-with-git"},{"id":"d8f2744a-0e92-51ee-a6a5-dc6e17647afa","excerpt":"（此文章适合听说过 git，大概知道 git 是什么东东，但是又不会 git 命令的童鞋阅读。\n时间充裕的童鞋可以到 codecademy 跟着教程一步步走） Git 是一个分布式的版本管理( Version Control…","frontmatter":{"title":"版本控制及git常用基本命令","date":"2015-12-04T03:40:04.000Z","tags":["git","version control","版本控制"]},"fields":{"slug":"/2015/12/04/git-basic/"},"slug":"20151204-git-basic"}],"totalCount":9}},"pageContext":{"tag":"git"}},"staticQueryHashes":["2873555300","67573329"]}