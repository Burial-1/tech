{"componentChunkName":"component---node-modules-gatsby-theme-replica-src-templates-category-tsx","path":"/tech/category/js","result":{"data":{"allMdx":{"nodes":[{"id":"8bc56396-eddf-5387-8495-be980c17e214","excerpt":"一如之前提到的，由于我的工作中会接触到很多 internationalization 的内容，对于货币、数字等的 foatmatting 需要特别注意。在我看到这条问题 之前，并不知道 toLocaleString 的用法和作用。我们自己的 codebase 中，关于国际化的部分是写了自己的 service 来实现不同国家的货币格式，经常都有各种 Bug…","frontmatter":{"title":"神奇的toLocaleString, Intl.NumberFormat","date":"2018-01-05T04:00:00.000Z","tags":["JS","internationalization","国际化"]},"fields":{"slug":"/post/20180105-the-magic-of-tolocalestring/"},"slug":"20180105-the-magic-of-tolocalestring"},{"id":"0b511a62-3922-5974-8adc-85d7f0ccb96a","excerpt":"一直以为这篇已经发过了，结果前两天搜的时候发现搜不到。一直扔在草稿里，今天整理一下之前和最近学到的一些 JS 小技巧 利用位运算取整 利用位运算，与、或、异或、左右移位， &   |   ^   >>   >>>   <<  ，舍去小数点后的数字 ， jsPerf 按位 非非 运算也是可以的，所以你也可以用 呻吟号 把代码写成这样 ~~a…","frontmatter":{"title":"一些js小技巧","date":"2016-10-19T07:08:33.000Z","tags":["js","tricks","js小技巧"]},"fields":{"slug":"/post/20161019-some-js-tricks/"},"slug":"20161019-some-js-tricks"},{"id":"02c74317-4909-5630-bc36-3a9caf838fd7","excerpt":"并行和顺序执行的前提当然是，有一堆 promise 等着你去执行……\n通常我们把这“一堆”promise 对象放到一个数组里， [promise1, promise2, promise3, ...] 我们都知道想要让 promise 按顺序执行，那就是一个接一个的 then。然而手写很多 then 太累了，而嵌套的 promise…","frontmatter":{"title":"Promise的顺序执行和并行执行","date":"2016-01-23T14:52:26.000Z","tags":["promise","parallel","sequential","顺序执行","并行执行"]},"fields":{"slug":"/post/20160123-excecute-parallel-promise-and-sequential-promise/"},"slug":"20160123-excecute-parallel-promise-and-sequential-promise"},{"id":"abd80b36-49a3-58b7-b85b-3c1bd7f610ae","excerpt":"2016-01-24 更新 \n我还是觉得嵌套多层的 promise 是反模式，不推荐使用，机智的我学会了另一种不嵌套不递归的方法，请看这里：\n Promise 的顺序执行和并行执行 以下为原文： 之前我一直有个疑问，当我有一堆 promise 的时候，怎么按顺序执行它们呢？ 网上搜到的大多数教程都是建一个数组 array ，把 promise 对象放到数组里，然后数组中的 promise…","frontmatter":{"title":"递归实现按顺序执行Promise","date":"2016-01-18T09:23:18.000Z","tags":["promise","递归"]},"fields":{"slug":"/post/20160118-sequentialize-promise-by-recursion/"},"slug":"20160118-sequentialize-promise-by-recursion"},{"id":"252121e3-1fd9-5cce-8a6b-1acc68d01085","excerpt":"本文只总结最常用的实现方法，不具体讨论各种实现方法的优缺点（这些具体可以看 《JavaScript 高级程序设计》 ）。 直到 ES5，JS 也还是一个没有类的语言，虽然 ES6 中可以使用 class 关键字，但据说也只是语法糖。(不知道好不好吃 ԅ(¯﹃¯ԅ)) 类的实现 类的两个基本元素就是 属性 和 方法 。 JS…","frontmatter":{"title":"对JS类和继承的一些理解","date":"2015-12-31T03:36:54.000Z","tags":["JS","prototype","继承","原型"]},"fields":{"slug":"/post/20151231-understand-js-inheritance/"},"slug":"20151231-understand-js-inheritance"},{"id":"e26cc823-9ea7-5f02-868c-7841adba0c9c","excerpt":"对 promise 这个概念之前已经有了一些浅显的理解， 相关文章->戳这里 ，最近又有了一些新的理解。 .then()的时候到底是在 then 什么… 首先要理解…Promise 是一个对象，有 then()方法的对象 then()的入参是一个函数，通常在 promise 链中，入参是 一个返回 promise 的函数 ，这句话好像有点拗口，就是说入参是一个函数，这个函数会 return…","frontmatter":{"title":"对Promise中的resolve，reject，catch的理解","date":"2015-12-22T03:36:07.000Z","tags":["promise chain","promise链"]},"fields":{"slug":"/post/20151222-understand-resolve-reject-catch-of-promise/"},"slug":"20151222-understand-resolve-reject-catch-of-promise"},{"id":"397a93c8-4a82-5110-9de3-371dfa910ca7","excerpt":"写了无数 JS 也依旧没听过变量提升… 变量提升(Hoisting)这个概念，我第一次见到是在万人膜拜的 Airbnb JS 代码风格 中见到。看完这一节大概明白是在说什么，然后觉得非常奇怪，这个概念平时写代码什么情况下用的到呢？ 我写了这么久 JS，从来也不会先用变量后定义的呀，而且别的语言好像根本没有这个概念，难怪我从来没有遇到相关问题，难怪我没听过这个概念。难怪写强类型语言的各大神都是 JS…","frontmatter":{"title":"JS变量提升(Hoisting)","date":"2015-12-21T02:24:02.000Z","tags":["hoisting","变量提升"]},"fields":{"slug":"/post/20151221-hoisting/"},"slug":"20151221-hoisting"},{"id":"9c408001-e634-5aaa-b154-bf9a86f96280","excerpt":"昨天无聊在 github 上看代码，看到如下片段，反正看不太懂这是在干啥，但这就是传说中的闭包了… 以上来自目测是个阿里女神的 repo:  utilx 很久之前就听过 闭包 这个概念，看了一些相关的资料，依旧无法明白到底是个什么东东。各种作用域 scope，看得我头都大了。 _ (:з」∠)…","frontmatter":{"title":"对JS闭包(Closure)的一些理解","date":"2015-12-19T11:22:27.000Z","tags":["JS","closure","闭包"]},"fields":{"slug":"/post/20151219-understand-js-closure/"},"slug":"20151219-understand-js-closure"},{"id":"fe6965e9-7925-5fb0-80c8-bc9d60f8749b","excerpt":"前几天看了一个帖子 我招不到想要的程序员 ，里面有一点是说 非极端情况下，一本以下的不要 。本来学历这种事情大家都无所谓，毕竟我所认识的大多数都是 985、211 的本硕博。只有当进入了另一个不同的世界，才觉得学历还挺重要的…\n我的 JS 基本都是靠自学，我的大神同学们都是搞后端强类型语言的，所以我只能上网搜搜，买点书看看，加几个参差不齐的 QQ…","frontmatter":{"title":"JS注释中的感叹号是干什么用的/*! */","date":"2015-12-14T06:15:06.000Z","tags":["js","重要注释","感叹号"]},"fields":{"slug":"/post/20151214-JS-important-comment/"},"slug":"20151214-JS-important-comment"},{"id":"6ddf932a-e43c-5488-8077-adaf9e420f2a","excerpt":"异步模式 （嫌我话多的可以直接看分割线之后的部分…）\n以前高中的时候自己捣腾博客，一直也就只会用 JQuery 写点按钮事件什么的，连表单提交都没写过，后来误打误撞做了前端码农旧觉得 JS 的异步模式实在是太坑爹，当你搞清楚异步回调的时候，又会发现 回调地狱(Callback Hell…","frontmatter":{"title":"我所理解的Promise","date":"2015-12-01T10:46:26.000Z","tags":["promise"]},"fields":{"slug":"/post/20151201-promise/"},"slug":"20151201-promise"}]}},"pageContext":{"category":"JS"}},"staticQueryHashes":["2873555300"]}