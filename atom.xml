<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小白妹妹写代码</title>
  <icon>https://www.gravatar.com/avatar/33db386efb13607178f855fd69e73158</icon>
  <subtitle>一个废话很多的程序媛</subtitle>
  <link href="/tech/atom.xml" rel="self"/>
  
  <link href="https://sabrinaluo.github.io/tech/"/>
  <updated>2018-05-31T02:23:25.985Z</updated>
  <id>https://sabrinaluo.github.io/tech/</id>
  
  <author>
    <name>HiiTea</name>
    <email>luohaojing[at]gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何延迟加载script(defer, async)</title>
    <link href="https://sabrinaluo.github.io/tech/2018/05/31/script-defer-async/"/>
    <id>https://sabrinaluo.github.io/tech/2018/05/31/script-defer-async/</id>
    <published>2018-05-31T07:18:29.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<p><code>&lt;script&gt;</code>的下载和执行都会阻塞页面渲染，因此大多数情况下，我们都把<code>&lt;script&gt;</code>放在<code>&lt;body&gt;</code>d的底部，渲染完前面的html内容之后才加载和执行JS。</p><p>然而有时由于某些限制，只把某些<code>&lt;script&gt;</code>放在<code>&lt;head&gt;</code>里，但又不希望页面渲染被阻塞，这种情况下，可以使用<code>async</code>或<code>defer</code>属性来延迟加载、渲染。</p><p>一张图胜过千言万语<a href="https://stackoverflow.com/a/39711009/3821392" target="_blank" rel="noopener">^1</a><br><img src="https://i.stack.imgur.com/wfL82.png" alt="image"></p><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>如果没有加任何与延迟加载相关的属性，浏览器会先加载、然后执行。这个过程会阻塞后面内容的渲染，也就是说，要等<code>&lt;script&gt;</code>加载并执行之后，才会开始渲染之后的内容。</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>因为可能存在类似需求：在执行脚本时，使用<code>document.write</code>，因此需要阻塞渲染</p><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><p>如果添加了<code>async</code>属性，浏览器会并行的一边渲染页面一边加载脚本。一旦脚本加载完成，就会执行脚本，执行脚本的过程会阻塞后续内容的渲染。</p><p><strong>!!!注意: 由于是加载完成就立刻执行，因此执行顺序是无法保证的！</strong><br><code>async</code>是html5中才有的属性，因此需要注意旧的浏览器不支持此属性</p><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><p>如果添加了<code>defer</code>属性，浏览器会并行的一边渲染页面一边加载脚本。等到页面内容完全渲染完成之后才开始执行，能够节约一点加载时间（因为是并行的）。这么看来使用<code>defer</code>跟放在<code>body</code>底部效果差不多，甚至更胜一筹，那么为什么现在还有很多人还在使用后者(body底部)这种方式呢，这两种方式到底有什么区别呢？<a href="https://stackoverflow.com/questions/5250412/how-exactly-does-script-defer-defer-work" target="_blank" rel="noopener">^2</a></p><h4 id="历史小知识"><a href="#历史小知识" class="headerlink" title="历史小知识"></a>历史小知识</h4><p>最早实现<code>defer</code>的是IE4，然而在IE4-9中的实现并没有按照WHATWG的标准<a href="https://www.html5rocks.com/en/tutorials/speed/script-loading/" target="_blank" rel="noopener">^3</a>，这个bug使得执行脚本时的<strong>顺序无法得到保证</strong>。</p><blockquote><p>deferred scripts should run after the document had parsed, in the order they were added. <a href="https://html.spec.whatwg.org/multipage/scripting.html#attr-script-defer" target="_blank" rel="noopener">^4</a></p></blockquote><blockquote><p>The defer attribute may be specified with the async attribute, so legacy browsers that only support defer (and not async) fall back to the defer behavior instead of the default blocking behavior <a href="https://html.spec.whatwg.org/multipage/scripting.html#attr-script-defer" target="_blank" rel="noopener">^4</a></p></blockquote><p><strong>!!!注意：</strong><br>为了避免在旧的IE浏览器上，脚本的执行顺序不符合预期，因此大多数时候还是使用将脚本放在<code>body</code>底部的方式</p><h3 id="IMPORTANT"><a href="#IMPORTANT" class="headerlink" title="IMPORTANT"></a>IMPORTANT</h3><blockquote><p>The <code>defer</code> and <code>async</code> attributes <strong>must not</strong> be specified if the src attribute is <strong>absent</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement#" target="_blank" rel="noopener">^5</a></p></blockquote><h3 id="body-bottom"><a href="#body-bottom" class="headerlink" title="body bottom"></a>body bottom</h3><p>将<code>&lt;script&gt;</code>放在<code>body</code>底部，能够保证脚本按照顺序加载及执行，缺点是无法节约加载时间</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1] <a href="https://stackoverflow.com/a/39711009/3821392" target="_blank" rel="noopener">https://stackoverflow.com/a/39711009/3821392</a><br>[2] <a href="https://stackoverflow.com/questions/5250412/how-exactly-does-script-defer-defer-work" target="_blank" rel="noopener">https://stackoverflow.com/questions/5250412/how-exactly-does-script-defer-defer-work</a><br>[3] <a href="https://www.html5rocks.com/en/tutorials/speed/script-loading/" target="_blank" rel="noopener">https://www.html5rocks.com/en/tutorials/speed/script-loading/</a><br>[4] <a href="https://html.spec.whatwg.org/multipage/scripting.html#attr-script-defer" target="_blank" rel="noopener">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-defer</a><br>[5] <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement#" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement#</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;的下载和执行都会阻塞页面渲染，因此大多数情况下，我们都把&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;放在&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;d的底部，渲染完前面的html内容之后才加载和执行J
      
    
    </summary>
    
      <category term="HTML" scheme="https://sabrinaluo.github.io/tech/categories/HTML/"/>
    
    
      <category term="html" scheme="https://sabrinaluo.github.io/tech/tags/html/"/>
    
      <category term="head" scheme="https://sabrinaluo.github.io/tech/tags/head/"/>
    
      <category term="script" scheme="https://sabrinaluo.github.io/tech/tags/script/"/>
    
      <category term="async" scheme="https://sabrinaluo.github.io/tech/tags/async/"/>
    
      <category term="defer" scheme="https://sabrinaluo.github.io/tech/tags/defer/"/>
    
  </entry>
  
  <entry>
    <title>使用fixup和auto squash修改git commit</title>
    <link href="https://sabrinaluo.github.io/tech/2018/05/21/fixup-and-auto-squash/"/>
    <id>https://sabrinaluo.github.io/tech/2018/05/21/fixup-and-auto-squash/</id>
    <published>2018-05-21T06:38:40.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<p>在写程序的过程中，经常遇到一些刚提交了commit就发现有个错别字这种尴尬的情况，我以前的做法是<code>git reset HEAD~1</code> 将HEAD指向提交之前的一个commit然后改完再重新提交‍🤦‍</p><p>除此之外，如果是最新的commit中的错误需要修改，其实还可以直接修改，之后使用<code>git add FILE_TO_CHANGE git comit --amend</code>，既可以修改最后一次提交的内容，也可以修改commit message。</p><p>但还有一些情况是，发现之前的某个commit有错别字或bug，这种情况很多同学（包括我😂）会开个新的普通的commit去fix，而不是<code>git commit --fixup COMMIT_HASH</code></p><h3 id="Conventional-Commit-1"><a href="#Conventional-Commit-1" class="headerlink" title="Conventional Commit ^1"></a>Conventional Commit <a href="https://conventionalcommits.org/" target="_blank" rel="noopener">^1</a></h3><p>使用 Conventional Commit 的 repo 可以使用 <a href="https://github.com/conventional-changelog/standard-version" target="_blank" rel="noopener">standard-version</a> 自动根据commit message生成CHANGELOG，并且自动bump version。前提是commit message需要follow相关的一些规定，例如<code>fix: xxx</code>， <code>feat: xxx</code></p><p>在使用Conventional Commit的repo中经常看到 <code>!fixup fix:xxx</code>这样的commit，此类commit会被忽略，而不会影响生成CHANGELOG。</p><h3 id="fixup"><a href="#fixup" class="headerlink" title="--fixup"></a><code>--fixup</code></h3><p>然而我并不知道有一个command是<code>--fixup</code>，再加上我平时都是用source tree之类的图形界面工具，所以每次需要fix一个commit的时候，都是手写<code>!fixup xx</code>这样的message，然后又由于偷懒，也不粘贴复制fixup的提交信息，而是直接写一个相似的短一点的信息🤦‍ （估计这样应该会导致无法<code>autosquash</code>）</p><h4 id="正确的使用方法及流程-2"><a href="#正确的使用方法及流程-2" class="headerlink" title="正确的使用方法及流程^2"></a>正确的使用方法及流程<a href="https://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html" target="_blank" rel="noopener">^2</a></h4><ul><li><p><code>git commit --fixup fb2f677</code><br>假设fixup后 git log 如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c5069d5 fixup! Feature A is done</span><br><span class="line">733e2ff Feature B is done</span><br><span class="line">fb2f677 Feature A is done</span><br><span class="line">ac5db87 Previous commit</span><br></pre></td></tr></table></figure></li><li><p><code>git rebase -i --autosquash ac5db87</code><br>需要注意，<code>autosquash</code>后面的hash必须是将要squash的commit的前一个</p></li></ul><h3 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h3><p>可能现在的web开发中很少用到patch了，我反正一次也没用过，也没听别人说用过，可能在APP或者客户端中比较常用到吧。</p><p>这个功能的作用是能够生成一个补丁文件，用<code>git apply ./xx.patch</code> 可以将补丁打到当前的repo中。</p><p>在没有github之前的时候，可能人们是通过这种方式玩开源的吧…发现别人有bug，修复之后如果直接发源文件实在太大大麻烦了，于是打一个补丁用email发出去给作者…感谢gayhub的出现，让我们这些小白参与开源社区的门槛降低也很多，操作也方便了很多，真是科技改变生活 :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在写程序的过程中，经常遇到一些刚提交了commit就发现有个错别字这种尴尬的情况，我以前的做法是&lt;code&gt;git reset HEAD~1&lt;/code&gt; 将HEAD指向提交之前的一个commit然后改完再重新提交‍🤦‍&lt;/p&gt;
&lt;p&gt;除此之外，如果是最新的commit中
      
    
    </summary>
    
      <category term="GIT" scheme="https://sabrinaluo.github.io/tech/categories/GIT/"/>
    
    
      <category term="git" scheme="https://sabrinaluo.github.io/tech/tags/git/"/>
    
      <category term="fixup" scheme="https://sabrinaluo.github.io/tech/tags/fixup/"/>
    
      <category term="squash" scheme="https://sabrinaluo.github.io/tech/tags/squash/"/>
    
      <category term="conventional commit" scheme="https://sabrinaluo.github.io/tech/tags/conventional-commit/"/>
    
      <category term="patch" scheme="https://sabrinaluo.github.io/tech/tags/patch/"/>
    
  </entry>
  
  <entry>
    <title>Object.is()</title>
    <link href="https://sabrinaluo.github.io/tech/2018/04/26/Object-is/"/>
    <id>https://sabrinaluo.github.io/tech/2018/04/26/Object-is/</id>
    <published>2018-04-26T04:25:15.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<p>前几天写测试的时候，有个地方需要检查Object的reference是否改变，jest中的<code>toEqual(value)</code>是deep compare，不适用于reference，于是查看了一下应该使用<code>toBe(value)</code>。</p><blockquote><p><code>toBe</code> just checks that a value is what you expect. It uses <code>Object.is</code> to check exact equality.<a href="https://facebook.github.io/jest/docs/en/expect.html#tobevalue" target="_blank" rel="noopener">^1</a></p></blockquote><p>以前没见过也没用过<code>Object.is</code>，查了一下发现是ES6的新语法<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is" target="_blank" rel="noopener">^2</a></p><h3 id="Object-is-val1-val2"><a href="#Object-is-val1-val2" class="headerlink" title="Object.is(val1, val2)"></a><code>Object.is(val1, val2)</code></h3><p><code>Object.is</code>方法用于比较两个对象是否相同，与<code>==</code>和<code>===</code>是有一定区别的</p><p>在使用<code>==</code>时，如果等号两边类型不同，js会先进行类型转换，再进行值的比较。<br>而使用<code>===</code>时，只要类型不同就未false<br><code>Object.is</code>在大多数情况下可以等同于<code>===</code>，但有两种情况除外</p><ul><li><code>+0</code> / <code>-0</code> <ul><li><code>===</code> 无法区分 <code>+0</code>和<code>-0</code></li><li><code>Object.is(+0, -0)</code> 返回<code>false</code> 可以区分</li></ul></li><li><code>NaN</code> <ul><li>无法用<code>===</code>来进行检查，需要使用<code>isNaN()</code>方法</li><li>但现在也可以用<code>Object.is(NaN, NaN)</code>来检查</li></ul></li></ul><h3 id="Magic-JS"><a href="#Magic-JS" class="headerlink" title="Magic JS"></a>Magic JS</h3><p>原来除了<code>0.1+0.2=0.00000000000034</code>这样的，还有其他搞笑的事情存在，可能这就是that’s why I love js？写的不好的时候就可以blame是JS辣鸡的原因，哈哈<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>===<span class="number">1</span>; </span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">+<span class="number">0</span>===<span class="number">-0</span>; </span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="number">1</span>/+<span class="number">0</span>===<span class="number">1</span>/<span class="number">-0</span>;</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h3 id="Infinity-4"><a href="#Infinity-4" class="headerlink" title="Infinity ^4"></a>Infinity <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity" target="_blank" rel="noopener">^4</a></h3><p><code>Infinity</code>是比任何数都大的<strong>数</strong>， 在运算上与数学上的Inf一样<br>需要注意：</p><ul><li><code>Infinity / Infinity</code> -&gt; <code>NaN</code></li><li><code>Number.POSITIVE_INFINITY</code></li><li><code>Number.NEGATIVE_INFINITY</code></li></ul><h3 id="Number-MAX-SAFE-INTEGER-5"><a href="#Number-MAX-SAFE-INTEGER-5" class="headerlink" title="Number.MAX_SAFE_INTEGER ^5"></a>Number.MAX_SAFE_INTEGER <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER" target="_blank" rel="noopener">^5</a></h3><p>本来只是想研究一下<code>Object.is</code>的，没想到顺带就又引申出了这么多其他的东西…上面提到<code>Infinity</code>，很容易联想到那么JS中最大的数是多大呢<br>JS中有<code>Number.MAX_SAFE_INTEGER</code>，其值为<code>2^53 - 1</code>，对应的最小数<code>Number.MIN_SAFE_INTEGER</code>，其值为<code>-(2^53 - 1)</code> 只有在这个范围内的数才能保证一定是正确的。</p><p>超出范围的数可能由于精度丢失还是什么别的原因，不一定正确，典型的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">1</span> === <span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">2</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>🙄</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天写测试的时候，有个地方需要检查Object的reference是否改变，jest中的&lt;code&gt;toEqual(value)&lt;/code&gt;是deep compare，不适用于reference，于是查看了一下应该使用&lt;code&gt;toBe(value)&lt;/code&gt;。&lt;
      
    
    </summary>
    
      <category term="ES6" scheme="https://sabrinaluo.github.io/tech/categories/ES6/"/>
    
    
      <category term="ES6" scheme="https://sabrinaluo.github.io/tech/tags/ES6/"/>
    
      <category term="Object， Jest" scheme="https://sabrinaluo.github.io/tech/tags/Object%EF%BC%8C-Jest/"/>
    
      <category term="infinity" scheme="https://sabrinaluo.github.io/tech/tags/infinity/"/>
    
  </entry>
  
  <entry>
    <title>global .gitignore</title>
    <link href="https://sabrinaluo.github.io/tech/2018/03/27/global-gitignore/"/>
    <id>https://sabrinaluo.github.io/tech/2018/03/27/global-gitignore/</id>
    <published>2018-03-27T04:39:44.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么需要全局-gitignore"><a href="#为什么需要全局-gitignore" class="headerlink" title="为什么需要全局 .gitignore"></a>为什么需要全局 <code>.gitignore</code></h3><p>通常来说，在repo中提交跟IDE相关的文件并非最佳实践，所以大多数时候会在<code>.gitignore</code>中加入IDE相关的文件pattern，然而市面上的IDE很多，不同程序员对IDE也有着自己的偏好，似乎不太可能把市面上所有的IDE都列出来。</p><p>除此之外，可能还有一些其他情况下，希望在本地ignore某些文件，但却不希望提交到远程的<code>.gitignore</code>中。</p><p>这种时候就该Git的 <strong>global ignore</strong> 上场啦！</p><p>添加全局<code>gitignore</code>之后会在本地所有的repo中都ignore在其中列出的文件，以达到本地忽略特定文件的效果，通常都是IDE啦…例如，本地ignore 与 <code>.idea</code> 相关的所有文件，但我们并不需要修改repo中的<code>.gitignore</code>文件。</p><h3 id="如何设置全局-gitignore"><a href="#如何设置全局-gitignore" class="headerlink" title="如何设置全局 .gitignore"></a>如何设置全局 <code>.gitignore</code></h3><p>首先在根文件夹<code>~</code>下创建一个<code>.gitignore_global</code>文件，（也可以在其他文件夹创建，但通常习惯于根文件夹下），然后运行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.excludesfile ~/.gitignore_global</span><br></pre></td></tr></table></figure></p><p>如果使用sourcetree就更简单了：<br><strong>menu &gt; sourcetree &gt; preference &gt; git</strong><br>将会看到 <strong>global ignore list:</strong> 字样，添加刚刚创建的<code>.gitignore_global</code>文件即可</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://help.github.com/articles/ignoring-files/" target="_blank" rel="noopener">https://help.github.com/articles/ignoring-files/</a><br><a href="https://stackoverflow.com/questions/30907829/sourcetree-adding-files-in-global-gitignore-not-in-repository-gitignore" target="_blank" rel="noopener">https://stackoverflow.com/questions/30907829/sourcetree-adding-files-in-global-gitignore-not-in-repository-gitignore</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么需要全局-gitignore&quot;&gt;&lt;a href=&quot;#为什么需要全局-gitignore&quot; class=&quot;headerlink&quot; title=&quot;为什么需要全局 .gitignore&quot;&gt;&lt;/a&gt;为什么需要全局 &lt;code&gt;.gitignore&lt;/code&gt;&lt;/h
      
    
    </summary>
    
      <category term="GIT" scheme="https://sabrinaluo.github.io/tech/categories/GIT/"/>
    
    
      <category term="git" scheme="https://sabrinaluo.github.io/tech/tags/git/"/>
    
      <category term="gitignore" scheme="https://sabrinaluo.github.io/tech/tags/gitignore/"/>
    
  </entry>
  
  <entry>
    <title>WebStorm的一些小技巧</title>
    <link href="https://sabrinaluo.github.io/tech/2018/03/09/tips-for-webstorm/"/>
    <id>https://sabrinaluo.github.io/tech/2018/03/09/tips-for-webstorm/</id>
    <published>2018-03-09T04:06:02.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<p>从我最开始学js，就一直用的是webstorm，因为很穷，一直都是用lanyu的盗版……我也很想买正版啊，但真的是太贵了。去年年底终于用上了正版了（用学校的邮箱注册的学生版）🤦‍♀️</p><p>因为比较懒，一直不想背各种快捷键，所以一直忍受着IDE的蜗牛速度，也没有换sublime vsc什么的，然而渐渐发现，有时候记点常用的快捷键还是非常有用的…(能让人更懒…)，看来所有的程序员到了一定阶段都都无法避免要折腾IDE啊…</p><p>总结一下webstorm的一些使用小技巧，防止以后又忘记了…</p><h3 id="快捷键技巧"><a href="#快捷键技巧" class="headerlink" title="快捷键技巧"></a>快捷键技巧</h3><h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><p>全局搜索文件、文件夹、关键字…全部： <kbd>shift</kbd> + <kbd>shift</kbd><br>全局搜索关键字： <kbd>cmd</kbd> + <kbd>shift</kbd> + <kbd>F</kbd><br>查看函数、变量在哪里定义的： <kbd>cmd</kbd> + click 或者 <kbd>cmd</kbd> + <kbd>B</kbd><br>当前文件下查找：  <kbd>cmd</kbd> + <kbd>F</kbd><br>当前文件下查找并替换：  <kbd>cmd</kbd> + <kbd>R</kbd></p><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p>关闭当前标签： <kbd>cmd</kbd> + <kbd>w</kbd><br>重新打开刚才关闭的标签： 这个没有默认的快捷键，需要在preference里面搜索reopen后设置<br>最近使用的文件列表： <kbd>cmd</kbd> + <kbd>E</kbd></p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p>自动补全： <kbd>tab</kbd><br>格式化： <kbd>cmd</kbd> + <kbd>alt</kbd> + <kbd>L</kbd></p><p>选中更大的代码块：<kbd>opt</kbd> + <kbd>↑</kbd>， <em>例如有一个switch代码块，光标定位在case处，按下快捷键选中整个case块（一下不行就多按几下，不太明白选中的机制），再按一下选中switch代码块</em><br>放置多个光标： <kbd>alt</kbd> + click<br>在当前行下添加一行： <kbd>shift</kbd> + <kbd>enter</kbd>  这样不需要特意将光标放在行末<br>删除行line：<kbd>cmd</kbd> + <kbd>back</kbd><br>复制并粘贴行line： <kbd>cmd</kbd> + <kbd>D</kbd><br>复制行： <kbd>cmd</kbd> + <kbd>C</kbd><br>剪切行： <kbd>cmd</kbd> + <kbd>X</kbd><br>移动行： <kbd>alt</kbd> + <kbd>shift</kbd> + <kbd>↑ or ↓</kbd><br>缓存去粘贴： <kbd>cmd</kbd> + <kbd>shift</kbd> + <kbd>V</kbd></p><p>注释/取消注释： <kbd>cmd</kbd> + <kbd>/</kbd><br>展开代码块： <kbd>cmd</kbd> + <kbd>+</kbd><br>折叠代码块： <kbd>cmd</kbd> + <kbd>-</kbd></p><p>返回上次编辑的地方： <kbd>cmd</kbd> + <kbd>shift</kbd> + <kbd>back</kbd></p><h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><p>变量名、函数名重构： <kbd>shift</kbd> + <kbd>F6</kbd> 或右击需要重构的变量/函数，选择refactor - rename</p><p>代码校验：<kbd>F2</kbd> 切换到下一个错误的那行</p><h3 id="非快捷键小技巧"><a href="#非快捷键小技巧" class="headerlink" title="非快捷键小技巧"></a>非快捷键小技巧</h3><h4 id="VSC-版本控制"><a href="#VSC-版本控制" class="headerlink" title="VSC 版本控制"></a>VSC 版本控制</h4><p>开启blame view： 在行号与代码之间的空白处右击弹出菜单中选<code>Annotate</code>可以打开blame view，查看当前版本都是谁修改的哪一行代码<br>关闭blame view： 在与上面相同的位置右击弹出菜单中选<code>Close Annotations</code></p><h4 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h4><p>多标签显示： 在标签出右击，可选<code>split vertically</code> 或 <code>split horizontally</code></p><p>TBC…</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1] <a href="https://blog.jetbrains.com/webstorm/2015/06/10-webstorm-shortcuts-you-need-to-know/" target="_blank" rel="noopener">https://blog.jetbrains.com/webstorm/2015/06/10-webstorm-shortcuts-you-need-to-know/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从我最开始学js，就一直用的是webstorm，因为很穷，一直都是用lanyu的盗版……我也很想买正版啊，但真的是太贵了。去年年底终于用上了正版了（用学校的邮箱注册的学生版）🤦‍♀️&lt;/p&gt;
&lt;p&gt;因为比较懒，一直不想背各种快捷键，所以一直忍受着IDE的蜗牛速度，也没有换
      
    
    </summary>
    
      <category term="IDE" scheme="https://sabrinaluo.github.io/tech/categories/IDE/"/>
    
    
      <category term="WebStorm" scheme="https://sabrinaluo.github.io/tech/tags/WebStorm/"/>
    
      <category term="IDE" scheme="https://sabrinaluo.github.io/tech/tags/IDE/"/>
    
      <category term="shortcut" scheme="https://sabrinaluo.github.io/tech/tags/shortcut/"/>
    
  </entry>
  
  <entry>
    <title>以太坊智能合约应用初体验</title>
    <link href="https://sabrinaluo.github.io/tech/2018/01/16/first-experience-of-ethereum-dapp/"/>
    <id>https://sabrinaluo.github.io/tech/2018/01/16/first-experience-of-ethereum-dapp/</id>
    <published>2018-01-16T14:57:42.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<p>我刚来香港那年（2012年）上了 Pf.Lau 的 enterpreneur 课知道了比特币，那个时候好像才CNY700多块钱一枚，13年的炒的最火的时候大概涨到了6000，如今五年多过去，比特币最高已经十几万人民币一枚了，反正我是没挣到钱:( ， 14年找工作的时候还差点去了一家比特币平台公司，这应该就是我跟区块链最初的良缘了。</p><p>最近半年也不知道为啥区块链特别火，到处的人们都在谈论区块链，感觉泡沫又快崩溃了。我个人是不看好比特币的货币属性的，但是对于区块链的去中心化以及智能合约应用却是很看好的。而且以太坊(Ethereum，缩写为ETH)最火的开发平台(truffle)又是我最喜欢的js，所以就看了看demo学了ETH界的hello world (pet shop)</p><p>总的来说感觉配置环境还是有一点点麻烦，需要安装nodejs, npm, truffle(开发平台), ganache(本地区块链), MetaMask(chrome插件)</p><p>官方给的demo不错，缺点是很多文件解释的不太清楚。<br>大概流程如下：</p><ol><li>解压官方demo <code>truffle unbox pet-shop</code></li><li>编写合约Adoption.sol, 编译(compoile)合约 (目前还不知道编译是干什么用的)</li><li>运行本地区块链</li><li>编写迁移配置文件(<code>/migrates/*</code>)，迁移(migrate)应用到本地区块链</li><li>测试合约</li><li>编写前端 (web3.js)</li><li>应用完成，可于网页中收养宠物</li></ol><p>合约部分是用<code>solidity</code>，这是开发ETH应用所使用的语言，是静态类型语言，需要声明变量的类型，函数入参的类型及返回值的类型。用分号分隔每一句代码。</p><p>官方的例子是前后端全都在一个项目里，不知道是否可以前后端放在不同的项目里分开开发，前端负责界面、业务逻辑、web3整合，后端负责合约的编写。不知道这样是否可行。</p><p>—– 分割线 ——<br>又看了两眼，感觉过程是这样的：</p><ul><li>编译的时候生成了<code>/build/</code>文件夹下的与合约相关的json文件</li><li>migrate的时候极有可能是把对应的json放到区块链上去</li><li>前端通过 <code>App.web3Provider = new Web3.providers.HttpProvider(&#39;http://localhost:7545&#39;);</code> 服务器获取合约相关的内容，由web3将获取的内容包装成一个实例</li><li>前端通过web3生成的实例进行相应操作</li></ul><p>如果是按照以上的流程来走的话，前后端就是完全可以分开开发的了。初来乍到，如有猜的不对的地方还请各位大佬多多指教。:)</p><p><strong>Reference:</strong><br><a href="http://truffleframework.com/tutorials/pet-shop" target="_blank" rel="noopener">http://truffleframework.com/tutorials/pet-shop</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我刚来香港那年（2012年）上了 Pf.Lau 的 enterpreneur 课知道了比特币，那个时候好像才CNY700多块钱一枚，13年的炒的最火的时候大概涨到了6000，如今五年多过去，比特币最高已经十几万人民币一枚了，反正我是没挣到钱:( ， 14年找工作的时候还差点
      
    
    </summary>
    
      <category term="Blockchain" scheme="https://sabrinaluo.github.io/tech/categories/Blockchain/"/>
    
    
      <category term="Ethereum" scheme="https://sabrinaluo.github.io/tech/tags/Ethereum/"/>
    
      <category term="Smart Contract" scheme="https://sabrinaluo.github.io/tech/tags/Smart-Contract/"/>
    
      <category term="DApp" scheme="https://sabrinaluo.github.io/tech/tags/DApp/"/>
    
      <category term="Blockchain" scheme="https://sabrinaluo.github.io/tech/tags/Blockchain/"/>
    
  </entry>
  
  <entry>
    <title>HTML DOM Element - image</title>
    <link href="https://sabrinaluo.github.io/tech/2018/01/12/image-element/"/>
    <id>https://sabrinaluo.github.io/tech/2018/01/12/image-element/</id>
    <published>2018-01-12T08:42:54.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<p>忘了是去年还是前年写了一个urbtix抢演唱会票的chrome小插件 <a href="https://github.com/sabrinaluo/urbtix-helper" target="_blank" rel="noopener">https://github.com/sabrinaluo/urbtix-helper</a> （每次都进不去网站，一次都没抢到😂），逻辑其实很简单，就是当用户设置了<code>event_id</code> <code>perfomence_id</code> <code>seat_type</code> <code>ticket_amount</code>之后，凡是自动点击的就由程序自动点击，以加快整个购票过程。</p><p>为了让界面和用户体验更好，所以在界面加了一个图片，来展示对应的演唱会海报（海报是通过urbtix的url扒来的，e.g. <a href="https://ticket.urbtix.hk/internet/p_image/cover/34505.jpg" target="_blank" rel="noopener">https://ticket.urbtix.hk/internet/p_image/cover/34505.jpg</a> ）。一直以来urbtix都是用<code>.jpg</code>图片文件，今天忽然发现，他们居然有些图片是<code>.jpeg</code>的🙄</p><p>于是问题就来了，如果不爬取urbtix的html是无法知道正确的图片格式的，所以一个代替的方案是，在<code>.jpg</code>下载失败时尝试使用<code>.jpeg</code>来下载，这就涉及到怎么检测图片是否加载成功…</p><p>搜了一下google，发现是非常基础的知识，这种时候就觉得自己基础实在是太差了…☹</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line"><span class="comment">// 相当于 document.createElement('img')</span></span><br></pre></td></tr></table></figure><h3 id="image-onload"><a href="#image-onload" class="headerlink" title="image.onload"></a>image.onload</h3><p>当图片加载完成时，触发image.onload</p><h3 id="image-onerror"><a href="#image-onerror" class="headerlink" title="image.onerror"></a>image.onerror</h3><p>当图片加载出现错误时，触发image.onerror</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继续上面的例子</span></span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'ok'</span>) &#125;;</span><br><span class="line">image.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'error'</span>) &#125;;</span><br><span class="line"></span><br><span class="line">image.src = <span class="string">'https://ticket.urbtix.hk/internet/p_image/cover/34505.jpg'</span>;</span><br><span class="line"><span class="comment">// → 'error'</span></span><br></pre></td></tr></table></figure><p>以上，就是辣么简单啦。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/Image" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/Image</a><br><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/image" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/image</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;忘了是去年还是前年写了一个urbtix抢演唱会票的chrome小插件 &lt;a href=&quot;https://github.com/sabrinaluo/urbtix-helper&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.co
      
    
    </summary>
    
      <category term="HTML" scheme="https://sabrinaluo.github.io/tech/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://sabrinaluo.github.io/tech/tags/HTML/"/>
    
      <category term="DOM" scheme="https://sabrinaluo.github.io/tech/tags/DOM/"/>
    
      <category term="image" scheme="https://sabrinaluo.github.io/tech/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>神奇的toLocaleString, Intl.NumberFormat</title>
    <link href="https://sabrinaluo.github.io/tech/2018/01/05/the-magic-of-tolocalestring/"/>
    <id>https://sabrinaluo.github.io/tech/2018/01/05/the-magic-of-tolocalestring/</id>
    <published>2018-01-05T04:00:00.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<p>一如之前提到的，由于我的工作中会接触到很多internationalization的内容，对于货币、数字等的foatmatting需要特别注意。在我看到这条问题<a href="https://stackoverflow.com/questions/8043026/javascript-format-number-to-have-2-digit" target="_blank" rel="noopener">^1</a>之前，并不知道<code>toLocaleString</code>的用法和作用。我们自己的codebase中，关于国际化的部分是写了自己的service来实现不同国家的货币格式，经常都有各种Bug，可以说是非常辣鸡了…</p><p>当然也有可能是需要照顾IE或者部分手机浏览器，从而限制了<code>toLocaleString</code>的使用，具体原因无法追溯…</p><h3 id="固定整数字符串长度"><a href="#固定整数字符串长度" class="headerlink" title="固定整数字符串长度"></a>固定整数字符串长度</h3><p>例如，我们需要显示的数字<strong>值</strong>为1, 2, 3 … 10, 11 ..。 100, 200等等，但希望显示的格式为所有数字都是固定的三位数，001, 002这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">1</span>;</span><br><span class="line">number.toLocaleString(<span class="string">'en-US'</span>,&#123;<span class="attr">minimumIntegerDigits</span>:<span class="number">3</span>, <span class="attr">useGrouping</span>: <span class="literal">false</span>&#125;);</span><br><span class="line"><span class="comment">// output '001'</span></span><br></pre></td></tr></table></figure></p><p>如果<code>locale</code>为<code>undefined</code> (上例中为<code>en-US</code>)，则默认值为系统的locale，即<code>navigator.language</code></p><p>不使用<code>toLocaleString</code>的实现方法：思路是将带转换数字转换为字符串后，在前面补足够多的零，然后用<code>slice</code>获取需要的最后若干位数。（我第一次看到这种实现方法的时候觉得，哇，还有这种骚操作！）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">12</span>;</span><br><span class="line">(<span class="string">'00'</span>+ number).slice(<span class="number">-3</span>);</span><br><span class="line"><span class="comment">// → '012'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">1</span>;</span><br><span class="line">(<span class="string">'00'</span>+ number).slice(<span class="number">-3</span>);</span><br><span class="line"><span class="comment">// → '001'</span></span><br></pre></td></tr></table></figure></p><h3 id="Intl-NumberFormat"><a href="#Intl-NumberFormat" class="headerlink" title="Intl.NumberFormat"></a>Intl.NumberFormat</h3><p>当需要格式化的数字较大时（多长算大呢？🤔），为了使性能更好，最好新建一个<code>Intl.NumberFormat</code>实例，使用其<code>format</code>方法来格式化。</p><blockquote><p>When formatting large numbers of numbers, it is better to create a NumberFormat object and use the function provided by its <code>NumberFormat.format</code> property. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString" target="_blank" rel="noopener">^2</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat" target="_blank" rel="noopener">^3</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">123456.789</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Intl</span>.NumberFormat(<span class="string">'en-US'</span>).format(number));</span><br><span class="line"><span class="comment">// → 123,456.789</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一如之前提到的，由于我的工作中会接触到很多internationalization的内容，对于货币、数字等的foatmatting需要特别注意。在我看到这条问题&lt;a href=&quot;https://stackoverflow.com/questions/8043026/java
      
    
    </summary>
    
      <category term="JS" scheme="https://sabrinaluo.github.io/tech/categories/JS/"/>
    
    
      <category term="JS" scheme="https://sabrinaluo.github.io/tech/tags/JS/"/>
    
      <category term="internationalization" scheme="https://sabrinaluo.github.io/tech/tags/internationalization/"/>
    
      <category term="国际化" scheme="https://sabrinaluo.github.io/tech/tags/%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>angular指令什么情况下只能有一个根元素(root element)</title>
    <link href="https://sabrinaluo.github.io/tech/2017/12/05/angular-directive-only-one-root-element/"/>
    <id>https://sabrinaluo.github.io/tech/2017/12/05/angular-directive-only-one-root-element/</id>
    <published>2017-12-05T07:28:03.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<p>好久么有记录什么有用的知识了，总是猴子掰玉米似的学点忘点:(</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在写自定义指令(custom directive)的时候，经常遇到下面这个错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: [$compile:tplrt] Template for directive &apos;xxx&apos; must have exactly one root element.</span><br></pre></td></tr></table></figure></p><p>但有时候又发现别人写的指令超过一个根元素，却并没有报错，真是非常的confusing🤔</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>官访文档在directive一节是找不到任何和replace有关的东西，后来是在$compile一节找到的，然而又已经弃用了……(又要感叹了，前端圈真特喵难混)</p><p>以下为文档说明</p><blockquote><p>replace (DEPRECATED)  </p><ul><li>replace will be removed in next major release - i.e. v2.0).  </li><li>Specifies what the template should replace. Defaults to false.  <ul><li>true - the template will replace the directive’s element.  </li><li>false - the template will replace the contents of the directive’s element.  </li></ul></li><li>The replacement process migrates all of the attributes / classes from the old element to the new one. See the Directives Guide for an example.</li></ul></blockquote><p>大概是说这个replace属性没什么卵用…实际使用的时候也觉得没什么场景是非要replace不可的，不过为了避免在jq selector里使用一堆莫名其妙的dom名称，replace一下让Html看起来更正常一点（对，我们就是jQuery和angular混用，就是这么任！性！🤷‍）</p><h3 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h3><p>在写组件template的时候用根元素把其他元素wrap起来，其实一个很好的习惯，这样一来，根元素上可以有css class，在使用sass之类的css预处理器时，有根类会使得维护成本变低</p><p>那么为什么会存在有多余一个根元素的组件呢？</p><p>我个人的感觉是，组件在最初设计时，并没有考虑到之后的扩展性，比如要写一个dropdown组件，首先想到的肯定是把select元素作为根元素，于是模板成了这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select class=&quot;xxxx&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>之后来了个需求：当所选的选项是某一些特定选项时，显示一个error message。这一下就比较尴尬了……</p><p>error message这个<code>div</code>只能和<code>select</code>同一个level才行，因为加在<code>select</code>里是肯定不会显示的。而一旦新加一个wrapper把之前的模板包起来，之前的css可能都要重写才会看起来没有变化。此时影响最小的做法就是移除指令中的<code>replace:true</code>属性，然后加多一个根元素了😂</p><p>Angular本身compile的机制是，如果没有replace:true，默认就是false，<strong>会自动创建一个<code>&lt;directive-name&gt;</code>元素作为根元素</strong>包裹住模板中的全部内容。</p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久么有记录什么有用的知识了，总是猴子掰玉米似的学点忘点:(&lt;/p&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;在写自定义指令(custom directive)的时候，经常遇
      
    
    </summary>
    
      <category term="AngularJS" scheme="https://sabrinaluo.github.io/tech/categories/AngularJS/"/>
    
    
      <category term="angular" scheme="https://sabrinaluo.github.io/tech/tags/angular/"/>
    
      <category term="directive" scheme="https://sabrinaluo.github.io/tech/tags/directive/"/>
    
  </entry>
  
  <entry>
    <title>Angular directive指令相关的scope问题(= @ &amp; ?)</title>
    <link href="https://sabrinaluo.github.io/tech/2017/09/01/angular-directive-scope/"/>
    <id>https://sabrinaluo.github.io/tech/2017/09/01/angular-directive-scope/</id>
    <published>2017-09-01T07:59:44.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<h3 id="老生常谈之-isolated-scope"><a href="#老生常谈之-isolated-scope" class="headerlink" title="老生常谈之 isolated scope"></a>老生常谈之 isolated scope</h3><p>每次说到directive, isolated scope总是要被提起的…官方的例子已经很好的说明了为什么我们需要isolated scope。当没有isolated scope的时候，directive依赖于controller的scope，这样每次使用directive，都需要创建新的controller。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"NaomiController"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-customer</span>&gt;</span><span class="tag">&lt;/<span class="name">my-customer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"IgorController"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-customer</span>&gt;</span><span class="tag">&lt;/<span class="name">my-customer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'docsScopeProblemExample'</span>, [])</span><br><span class="line">.controller(<span class="string">'NaomiController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">  $scope.customer = &#123;</span><br><span class="line">    name: <span class="string">'Naomi'</span>,</span><br><span class="line">    address: <span class="string">'1600 Amphitheatre'</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;])</span><br><span class="line">.controller(<span class="string">'IgorController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">  $scope.customer = &#123;</span><br><span class="line">    name: <span class="string">'Igor'</span>,</span><br><span class="line">    address: <span class="string">'123 Somewhere'</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;])</span><br><span class="line">.directive(<span class="string">'myCustomer'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    restrict: <span class="string">'E'</span>,</span><br><span class="line">    template: <span class="string">'&lt;div&gt;Name: &#123;&#123;customer.name&#125;&#125; Address: &#123;&#123;customer.address&#125;&#125;&lt;/div&gt;'</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Isolated scope 其实就是当你在directive里要return的那个object里，定义一个scope属性，这个<code>scope</code>会override controller中的<code>$scope</code>，从而实现isolated。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'docsIsolateScopeDirective'</span>, [])</span><br><span class="line">.controller(<span class="string">'Controller'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">  $scope.naomi = &#123; <span class="attr">name</span>: <span class="string">'Naomi'</span>, <span class="attr">address</span>: <span class="string">'1600 Amphitheatre'</span> &#125;;</span><br><span class="line">  $scope.igor = &#123; <span class="attr">name</span>: <span class="string">'Igor'</span>, <span class="attr">address</span>: <span class="string">'123 Somewhere'</span> &#125;;</span><br><span class="line">&#125;])</span><br><span class="line">.directive(<span class="string">'myCustomer'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    restrict: <span class="string">'E'</span>,</span><br><span class="line">    scope: &#123;</span><br><span class="line">      customerInfo: <span class="string">'='</span></span><br><span class="line">    &#125;,</span><br><span class="line">    templateUrl: <span class="string">'my-customer-iso.html'</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="amp"><a href="#amp" class="headerlink" title="= &amp; @ ?"></a><code>=</code> <code>&amp;</code> <code>@</code> <code>?</code></h3><p>通常在写Angular的时候经常看到别人的指令scope里会有下面着这样<code>=</code> <code>@</code> <code>&amp;</code>的符号，我自己呢，90%的时候都是用<code>=</code>，也不知道其他符号到底是干什么用的。今天无心工作，仔细研究了一下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.directive(<span class="string">'myDirective'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        scope: &#123;</span><br><span class="line">            optionOne: <span class="string">'='</span>,</span><br><span class="line">            optionTwo: <span class="string">'=?'</span>,</span><br><span class="line">            optionThree: <span class="string">'@'</span>,</span><br><span class="line">            optionFour: <span class="string">'&amp;'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="双向绑定-two-way-binding"><a href="#双向绑定-two-way-binding" class="headerlink" title="= 双向绑定(two way binding)"></a><code>=</code> 双向绑定(two way binding)</h4><p>这个好理解，父子两个scope，任何一个改变，剩下的一个也跟着一起改变</p><p>需要注意的是，传入参数时，是没有花括号的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-directive</span> <span class="attr">options</span>=<span class="string">"options"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-directive</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="单向绑定-one-way-binding"><a href="#单向绑定-one-way-binding" class="headerlink" title="@ 单向绑定(one way binding)"></a><code>@</code> 单向绑定(one way binding)</h4><p>首先，单向绑定传入的是一个<strong>字！符！串！</strong>；其次，父scope改变子scope跟着变，但子scope改变时，父scope不会改变！</p><p>由于传入的是一个字符串，所以是需要花括号的，如下，假如父scope中<code>name=&#39;Lucy&#39;</code>，第一个指令接收到的是<code>&#39;name&#39;</code>这个字符串，第二个指令接受的才是<code>&#39;Lucy&#39;</code>这个字符串<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-directive</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-directive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-directive</span> <span class="attr">name</span>=<span class="string">"&#123;&#123;name&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-directive</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="amp-绑定函数"><a href="#amp-绑定函数" class="headerlink" title="&amp; 绑定函数"></a><code>&amp;</code> 绑定函数</h4><blockquote><p>The <code>&amp;</code> binding allows a directive to trigger evaluation of an expression in the context of the original scope</p></blockquote><p><code>&amp;</code>绑定允许指令触发原始scope(指令所在的父元素的scope)中的函数</p><blockquote><p>Best Practice: use <code>&amp;attr</code> in the <code>scope</code> option when you want your directive to expose an API for binding to behaviors.</p></blockquote><p>可以理解为传入一个<strong>回调函数</strong>给指令，指令触发该函数，但该函数并不定义在指令的scope中。因为如果该函数定义在directive的scope中，则逻辑是固定的，从外部传入的话，可以传入任意逻辑的函数。</p><p>我的一些<strong>Anti-pattern</strong></p><ul><li>关于函数绑定这个事，我通常直接用<code>=</code>绑定函数，也能用……但这个肯定有什么潜在的问题我没发现；  </li><li>我的另一种用法是，仍然用<code>=</code>绑定一个对象，把函数放在对象里，比如绑定的是<code>options</code>这个对象，但对象中有<code>options.sayHi</code>这个属性（其实是个函数）。</li></ul><p>我能想到的潜在的问题就是，会存在<code>undefined is not a function</code>，但如果检查一下属性是否存在是否类型function不就可以了？？？我知道可能会有问题，但到底会有什么问题呢？🤔</p><p>—- 更新 —-<br>大概知道原因了…不用<code>@</code>很好理解，用<code>@</code>传入的是个字符串不是函数；而不用<code>=</code>因为双向绑定存在子scope改变父scope中的函数的风险，并且也会有<code>$watch</code>的开销，一定程度上影响性能。<br><a href="https://stackoverflow.com/questions/29857998/proper-way-to-pass-functions-to-directive-for-execution-in-link" target="_blank" rel="noopener">https://stackoverflow.com/questions/29857998/proper-way-to-pass-functions-to-directive-for-execution-in-link</a></p><p><code>&amp;</code>绑定后，返回的是一个返回父scope中对应函数的函数😂，有点拗口。举个栗子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-directive</span> <span class="attr">callback</span>=<span class="string">"sayHi(a,b,c)"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-directive</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>指令中的<code>scope.callback</code>值为<code>function(locals){ return parentGet(scope, locals);}</code></p><p>所以<code>scope.callback({a:1,b:2,c:3})</code>等价于<code>parentScope.sayHi(1,2,3)</code><br>需要注意的是:</p><ul><li><code>scope.callback({a:1,b:2,c:3})</code>的入参是一个<code>object</code></li><li>如果是这样<code>scope.callback({a:1,b:2})</code>，则<code>c</code>的值会与<code>parentScope.c</code>相同。也就是说，如果<strong>子scope</strong>传入的<code>obj</code>中没有定义对应参数，各参数的默认值与<code>parentScope</code>中的对应值一致。如果<strong>父子scope</strong>中都没有定义相关参数，则为<code>undefined</code></li></ul><h4 id=""><a href="#" class="headerlink" title="?"></a><code>?</code></h4><p>问号这个挺简单的，跟glob啊，正则的里面的<code>?</code>意思相似，就是说该属性是否是必需选项，当有问号的时候，说明对应的属性可以省略，而不会报错<code>NON_ASSIGNABLE_MODEL_EXPRESSION</code></p><h3 id="无关感言"><a href="#无关感言" class="headerlink" title="无关感言"></a>无关感言</h3><p>我第一次知道AngularJS大约是3年前，除了学校的一些酱油小项目外完全没有任何开发经验，对于JS只知道jQuery却又要去找一份程序员的工作。面试的时候人家问我：会Angular吗？我：？？？当然是没有面上，回去之后到code school学完了入门课程，在官网学完了那个卖手机的demo。当然之后我也没有直接去做一份跟Angular有关的工作。</p><p>如今，在我终于做着一份Angular1.x的工作时，Angular5都快发布了，（再次感叹，前端圈真难混），而我连TypeScript也还没学会，关于Angular的很多基本问题也还是云里雾里……但这并不妨碍我能写出能在生产环境使用的应用🙄，基础和工程经验这是没什么必然关系，（当然也可能是我天赋异禀而不自知🤣）。其实我现在是很不想写Angular1.x的，总觉得是非常outdated的东西，然而🤷‍</p><p>另外，这篇真是50%以上都是抄袭官网…但是不抄根本记不住…</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1] <a href="https://docs.angularjs.org/guide/directive" target="_blank" rel="noopener">https://docs.angularjs.org/guide/directive</a><br>[2] <a href="https://blog.coding.net/blog/angularjs-directive-isolate-scope" target="_blank" rel="noopener">https://blog.coding.net/blog/angularjs-directive-isolate-scope</a><br>[3] <a href="https://stackoverflow.com/questions/14908133/what-is-the-difference-between-vs-and-in-angularjs" target="_blank" rel="noopener">https://stackoverflow.com/questions/14908133/what-is-the-difference-between-vs-and-in-angularjs</a><br>[4] <a href="https://stackoverflow.com/questions/20447786/whats-the-meaning-of-in-angularjs-directive-isolate-scope-declaration" target="_blank" rel="noopener">https://stackoverflow.com/questions/20447786/whats-the-meaning-of-in-angularjs-directive-isolate-scope-declaration</a><br>[5] <a href="https://stackoverflow.com/questions/29857998/proper-way-to-pass-functions-to-directive-for-execution-in-link" target="_blank" rel="noopener">https://stackoverflow.com/questions/29857998/proper-way-to-pass-functions-to-directive-for-execution-in-link</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;老生常谈之-isolated-scope&quot;&gt;&lt;a href=&quot;#老生常谈之-isolated-scope&quot; class=&quot;headerlink&quot; title=&quot;老生常谈之 isolated scope&quot;&gt;&lt;/a&gt;老生常谈之 isolated scope&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="AngularJS" scheme="https://sabrinaluo.github.io/tech/categories/AngularJS/"/>
    
    
      <category term="angular" scheme="https://sabrinaluo.github.io/tech/tags/angular/"/>
    
      <category term="directive" scheme="https://sabrinaluo.github.io/tech/tags/directive/"/>
    
      <category term="scope" scheme="https://sabrinaluo.github.io/tech/tags/scope/"/>
    
      <category term="isolated scope" scheme="https://sabrinaluo.github.io/tech/tags/isolated-scope/"/>
    
  </entry>
  
  <entry>
    <title>用webpack打包react组件</title>
    <link href="https://sabrinaluo.github.io/tech/2017/08/14/react-component-with-webpack/"/>
    <id>https://sabrinaluo.github.io/tech/2017/08/14/react-component-with-webpack/</id>
    <published>2017-08-14T02:36:56.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>好多人都吐槽Webpack配置太复杂了，然而1.x我都还没学会现在都已经3.x了，前段圈真的好难混啊，真是必须活到老学到老啊…</p><p>前段时间闲得无聊看到个播放器叫<a href="https://github.com/DIYgod/APlayer" target="_blank" rel="noopener">APlayer</a>，就想着包起来做个Vue或者React能用的吧，练练手……然后由于我的拖延症，写了好久，就在我写完Vue版本的第二天，还没push，就发现MD已经有别人比我早几天写好了，好气哦…于是只能重头开始写React版</p><p>因为从开始就是用<code>create-react-app</code>的脚手架，所以也没考虑npm require时候会有什么问题，<a href="http://sabrinaluo.com/react-aplayer/" target="_blank" rel="noopener">Demo</a>更是直接写在<code>src</code> 文件夹里，我自己引用的时候当然没有问题啦…不过<code>create-react-app</code>没有提供相应的功能也有别人吐槽过了<a href="https://github.com/facebookincubator/create-react-app/issues/1492" target="_blank" rel="noopener">^1</a></p><p>发布了之后有人给提了个Issue，说引用之后编译的时候有问题，我一看果然…<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncaught ReferenceError: React is not defined</span><br></pre></td></tr></table></figure></p><h3 id="正经事儿"><a href="#正经事儿" class="headerlink" title="正经事儿"></a>正经事儿</h3><p><code>/src</code>里的文件都是<code>ES6</code>和<code>JSX</code>形式，第一反应是我的文件没有被webpack里的<code>babel-loader</code>成功编译，查了一些资料之后发现问题是在<code>create-react-app</code>的webpack配置中，只会编译<code>./src</code>下的文件，而当我的库作为第三方依赖引入时，是在<code>./node_modules</code>下，因此没有被编译。（使用webpack编译时通常都会忽略<code>./node_modules</code>下的文件，没理由去编译别人的包呀，也就是说别人发布这个包的时候，就应该是编译好的了，然而偷懒的我没有编译就直接发布了）(⊙﹏⊙)b</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./react-scripts/config/webpack.config.prod.js</span></span><br><span class="line"><span class="comment">// Process JS with Babel.</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">  include: paths.appSrc,</span><br><span class="line">  loader: <span class="built_in">require</span>.resolve(<span class="string">'babel-loader'</span>),</span><br><span class="line">  options: &#123;</span><br><span class="line">    <span class="comment">// @remove-on-eject-begin</span></span><br><span class="line">    babelrc: <span class="literal">false</span>,</span><br><span class="line">    presets: [<span class="built_in">require</span>.resolve(<span class="string">'babel-preset-react-app'</span>)],</span><br><span class="line">    <span class="comment">// @remove-on-eject-end</span></span><br><span class="line">    compact: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>为了编译我的文件，我还要专门写一个<code>webpack.config.js</code>真是好心累…写的时候遇到的问题更心累</p><p>首先就是最基本的配置，相关的<code>loader</code>和minify plugin，编译之后文件很大…原来是把<code>react</code>也打包进去了，如果所有人都这么写组件的话……最后的APP里有几个组件就会有几份重复的react，肯定是不对的。</p><p>之后搜到，要排除某个库，可以用<code>external</code>选项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">externals: [&apos;react&apos;]</span><br></pre></td></tr></table></figure></p><p>然而，加上这个时候我的噩梦就来啦，永远都提示<code>React is undefined</code>，试了各种各样的<code>external</code>写法，对象、数组…都不管用。花了两三天时间，才搜到一个说<code>libiaryTarget: &#39;umd&#39;</code>的<a href="https://github.com/zhengweikeng/blog/issues/10" target="_blank" rel="noopener">^2</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1: <a href="https://github.com/facebookincubator/create-react-app/issues/1492" target="_blank" rel="noopener">https://github.com/facebookincubator/create-react-app/issues/1492</a><br>2: <a href="https://github.com/zhengweikeng/blog/issues/10" target="_blank" rel="noopener">https://github.com/zhengweikeng/blog/issues/10</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;吐槽&quot;&gt;&lt;a href=&quot;#吐槽&quot; class=&quot;headerlink&quot; title=&quot;吐槽&quot;&gt;&lt;/a&gt;吐槽&lt;/h3&gt;&lt;p&gt;好多人都吐槽Webpack配置太复杂了，然而1.x我都还没学会现在都已经3.x了，前段圈真的好难混啊，真是必须活到老学到老啊…&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="WEBPACK" scheme="https://sabrinaluo.github.io/tech/categories/WEBPACK/"/>
    
    
      <category term="webpack" scheme="https://sabrinaluo.github.io/tech/tags/webpack/"/>
    
      <category term="react" scheme="https://sabrinaluo.github.io/tech/tags/react/"/>
    
      <category term="react-component" scheme="https://sabrinaluo.github.io/tech/tags/react-component/"/>
    
  </entry>
  
  <entry>
    <title>尾逗号(Trailing Comma)的意义</title>
    <link href="https://sabrinaluo.github.io/tech/2017/07/12/trailing-comma/"/>
    <id>https://sabrinaluo.github.io/tech/2017/07/12/trailing-comma/</id>
    <published>2017-07-12T03:01:13.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<p>以前在网上看别人写的代码，有时候会看到这样，数组的最后一个元素后面多一个逗号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var foo = [</span><br><span class="line">    1,</span><br><span class="line">    2,</span><br><span class="line">    3,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>作为一个懒癌晚期患者，觉得要多加一个逗号，真是好麻烦！那是naive的我，当然还不知道有版本控制diff这种高级工具，还停留在复制粘贴文件夹的人工版本控制低级阶段…</p><p>后来看到几家大厂的代码规范<a href="https://github.com/airbnb/javascript#functions--signature-invocation-indentation" target="_blank" rel="noopener">^1</a>, <a href="https://google.github.io/styleguide/jsguide.html#features-arrays-trailing-comma" target="_blank" rel="noopener">^2</a>中都有相应的规范。Airbnb的JS代码规范是非常火的，然而最开始的时候我个人比较喜欢的是Google的JS代码规范，就因为A家有我不喜欢的trailing comma。没想到，过了一段时间之后，G家也采用了这一条…而恰好也是这段时间，我一直在思考为什么有的人要把代码写的那么不clean？多年的经验告诉我，所有规则一定都是有原因的！</p><p>传图好麻烦…我就文字描述一下吧。凡是用过git的人应该都知道有diff view这种东西，用来比较两个版本的代码有什么区别。没有尾逗号的时候，当你需要添加一个元素，就需要在最后一个元素的<strong>1. 末尾加上一个逗号，2.换行添加新内容</strong>，如下面的例子所示。</p><p>Before<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var foo = [</span><br><span class="line">    1,</span><br><span class="line">    2</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>After<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var foo = [</span><br><span class="line">    1,</span><br><span class="line">    2,</span><br><span class="line">    3</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>这样一来，diff view中就会显示修改了<strong>两行</strong>代码。如果使用尾逗号，则添加一个元素只需要<strong>1.换行添加新内容</strong>即可，diff view中显示只修改（添加）了一行代码。</p><h3 id="一点人生感悟"><a href="#一点人生感悟" class="headerlink" title="一点人生感悟"></a>一点人生感悟</h3><p>这个世界上，凡事都是trade off，算法复杂度里要么时间换空间要么空间换时间。<br>尾逗号也一样，想要diff view clean，代码就不那么clean；想要代码clean，diff view就不那么clean。<br>所以搞清楚自己想要什么，又有什么可以去trade off，就很重要了。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>[1] <a href="https://medium.com/@nikgraf/why-you-should-enforce-dangling-commas-for-multiline-statements-d034c98e36f8" target="_blank" rel="noopener">https://medium.com/@nikgraf/why-you-should-enforce-dangling-commas-for-multiline-statements-d034c98e36f8</a><br>[2] <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前在网上看别人写的代码，有时候会看到这样，数组的最后一个元素后面多一个逗号：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
      
    
    </summary>
    
      <category term="CODE STYLE" scheme="https://sabrinaluo.github.io/tech/categories/CODE-STYLE/"/>
    
    
      <category term="版本控制" scheme="https://sabrinaluo.github.io/tech/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="trailing comma" scheme="https://sabrinaluo.github.io/tech/tags/trailing-comma/"/>
    
      <category term="comma-dangle" scheme="https://sabrinaluo.github.io/tech/tags/comma-dangle/"/>
    
      <category term="尾逗号" scheme="https://sabrinaluo.github.io/tech/tags/%E5%B0%BE%E9%80%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>关于本地化的一些技巧</title>
    <link href="https://sabrinaluo.github.io/tech/2017/05/26/interpolation-and-pluralization/"/>
    <id>https://sabrinaluo.github.io/tech/2017/05/26/interpolation-and-pluralization/</id>
    <published>2017-05-26T09:59:03.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<p>在香港工作总是能接触到各种“本地化”的需求，大多数网站至少都会有中英文两个版本，有的还会分简体中文和繁体中文。而在实现本地化的过程中，由于英文与中文的文法、语序等差异，会有很多情况需要处理。</p><h3 id="i18n-amp-i10n"><a href="#i18n-amp-i10n" class="headerlink" title="i18n &amp; i10n"></a>i18n &amp; i10n</h3><p>一直以来我都混淆使用这两个term，其中i18n是国际化，主要用于世界通用内容的翻译，<strong>使产品无需做大的改变就能够适应不同的语言和地区的需要</strong>，包括时间、日期、货币等；而i10n是本地化，也就是把网站里其他内容进行翻译。</p><h3 id="content-key"><a href="#content-key" class="headerlink" title="content key"></a>content key</h3><p>将需要翻译的位置用<strong>Content Key</strong>占位，在单独的文件里来处理对应的翻译已经成为了本地化的最基本策略。这样做的好处是，1. 保持代码的整洁，无需因为翻译问题不断提交commit，避免污染git history；2. 方便不懂代码的运营人员随时调整翻译内容，而无需增加开发负担。</p><h3 id="单复数-pluralization"><a href="#单复数-pluralization" class="headerlink" title="单复数 pluralization"></a>单复数 pluralization</h3><p>举个栗子，如果需要翻译“x个苹果”，对应的英文会有单复数形式，遇到这种情况的时候，如果缺乏经验，通常是写<code>if</code> <code>else</code>， 然后用两个不同的key：</p><table><thead><tr><th>key</th><th>zh</th><th>en</th></tr></thead><tbody><tr><td>webstie.key.apple</td><td>个苹果</td><td>apple</td></tr><tr><td>webstie.key.apples</td><td>个苹果</td><td>apples</td></tr></tbody></table><p>但是template里写太多的if else 容易使得逻辑混乱，也不利于维护，机智的我今天忽然发现angular其实有一个专门的指令来做这个事:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ng-pluralize count=&quot;personCount&quot;</span><br><span class="line">                 when=&quot;&#123;&apos;0&apos;: &apos;Nobody is viewing.&apos;,</span><br><span class="line">                     &apos;one&apos;: &apos;1 person is viewing.&apos;,</span><br><span class="line">                     &apos;other&apos;: &apos;&#123;&#125; people are viewing.&apos;&#125;&quot;&gt;</span><br><span class="line">&lt;/ng-pluralize&gt;</span><br></pre></td></tr></table></figure><p>这个指令的本质其实跟if else类似，使用了一个hash map来储存对应的翻译，而我们可以利用这个指令，把when的值写到controller里，这样会比较美观 XD</p><h3 id="插值-interpolation"><a href="#插值-interpolation" class="headerlink" title="插值 interpolation"></a>插值 interpolation</h3><p>有时候我们不得不把一整句话打断成多个部分，比如“step 1 of 5 ”，而对应的中文如果要求翻译成“第1步（共5步）”。这种情况下，如果使用断句的方法来翻译，中文需要有3个key，分别对应</p><table><thead><tr><th>lang</th><th>part1</th><th>part2</th><th>part3</th></tr></thead><tbody><tr><td>en</td><td>step</td><td>of</td><td></td></tr><tr><td>zh</td><td>第</td><td>步（共</td><td>步）</td></tr></tbody></table><p>这样做，不仅不美观，写起来<code>string + string + string</code>也非常麻烦，同时代码及翻译文件都增加了维护的难度。</p><p>大家应该都有经验，在<code>console.log</code>中，可以使用<code>%s</code>作为占位符，如果能够使用占位符来进行翻译，以上情况就会简单很多。</p><p>Angular原生的<code>$interpolate</code>服务，用于编译含有特定标记的字符串，<code>Hello, {{name}}</code></p><blockquote><p>Compiles a string with markup into an interpolation function</p></blockquote><p>翻译时，大多时候时候都是用<code>angular-translate</code>，这个第三方的服务能很好的处理插值，使用的标记是两个花括号<code>{{}}</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//基本用法</span><br><span class="line">$translate(translationId[, interpolateParams], interpolationId, defaultTranslationText, forceLanguage);</span><br><span class="line"></span><br><span class="line">//例子</span><br><span class="line">$scope.stepInfoText = $filter(&apos;translate&apos;)(&apos;widget-progress-bar.step.text&apos;, &#123;currentStep:1, totalStep: 5&#125;);</span><br><span class="line"></span><br><span class="line">//翻译文件 *.properties</span><br><span class="line">widget-progress-bar.step.text=step &#123;&#123;currentStep&#125;&#125; of &#123;&#123;totalStep&#125;&#125;</span><br><span class="line">//output: step 1 of 5</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1: <a href="https://docs.angularjs.org/guide/i18n" target="_blank" rel="noopener">https://docs.angularjs.org/guide/i18n</a><br>2: <a href="https://docs.angularjs.org/api/ng/directive/ngPluralize" target="_blank" rel="noopener">https://docs.angularjs.org/api/ng/directive/ngPluralize</a><br>3: <a href="https://stackoverflow.com/questions/27259723/angularjs-pluralization-with-angular-translate-and-ng-pluralize" target="_blank" rel="noopener">https://stackoverflow.com/questions/27259723/angularjs-pluralization-with-angular-translate-and-ng-pluralize</a><br>4: <a href="https://docs.angularjs.org/api/ng/service/$interpolate" target="_blank" rel="noopener">https://docs.angularjs.org/api/ng/service/$interpolate</a><br>5: <a href="https://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translate" target="_blank" rel="noopener">https://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translate</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在香港工作总是能接触到各种“本地化”的需求，大多数网站至少都会有中英文两个版本，有的还会分简体中文和繁体中文。而在实现本地化的过程中，由于英文与中文的文法、语序等差异，会有很多情况需要处理。&lt;/p&gt;
&lt;h3 id=&quot;i18n-amp-i10n&quot;&gt;&lt;a href=&quot;#i18n
      
    
    </summary>
    
      <category term="AngularJS" scheme="https://sabrinaluo.github.io/tech/categories/AngularJS/"/>
    
    
      <category term="interpolation" scheme="https://sabrinaluo.github.io/tech/tags/interpolation/"/>
    
      <category term="pluralization" scheme="https://sabrinaluo.github.io/tech/tags/pluralization/"/>
    
      <category term="localization" scheme="https://sabrinaluo.github.io/tech/tags/localization/"/>
    
      <category term="翻译" scheme="https://sabrinaluo.github.io/tech/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="本地化" scheme="https://sabrinaluo.github.io/tech/tags/%E6%9C%AC%E5%9C%B0%E5%8C%96/"/>
    
      <category term="单复数" scheme="https://sabrinaluo.github.io/tech/tags/%E5%8D%95%E5%A4%8D%E6%95%B0/"/>
    
      <category term="ng-pluralize" scheme="https://sabrinaluo.github.io/tech/tags/ng-pluralize/"/>
    
  </entry>
  
  <entry>
    <title>一点感悟</title>
    <link href="https://sabrinaluo.github.io/tech/2017/05/11/thoughts/"/>
    <id>https://sabrinaluo.github.io/tech/2017/05/11/thoughts/</id>
    <published>2017-05-11T03:21:54.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<p>不知道为什么，我是比较喜欢JS这种脑残语言的，并且也不想将其他语言用在工作中，比如PHP、PYTHON、JAVA之类的。</p><p>其实到最后肯定所有语言都是相通的，比如每种语言都会有自己的<code>lodash</code>、<code>npm</code>、<code>package.json</code>，所以当精通一种语言之后是能对其他语言的人指点江山的。我之前的一个同事新手写python，库也不会用也不知道去哪里下载，我对Python的认识只限于这是一个用缩进来控制块的语言，但搜了一下果然有<code>pip</code>，<code>requirements.txt</code></p><p>举这个例子是因为我认为，用一个语言用得精通比会用很多语言都是略知一二更重要。</p><p>前几天我有一个写PHP的同事，被迫去写nodeJS，然后遇到一个soap的问题，调了一天都没调出来，扔给我帮忙。问题大概是，用了一个叫<code>node-soap</code>的库，发请求的时候对方服务器总是返回<code>ERROR Invalid XML</code>，而用Postman把请求的body发出去，却能得到成功的返回结果，同事怀疑这个第三方库有问题。</p><p>我虽然对SOAP一窍不通，但我懂JS，觉得这个问题应该能找出原因。根据以前的经验，我觉得不太可能是第三方库的问题，因为每次只使用基本方法却有问题时我debug到别人库里去看明白原理之后，绝大多数时候都会发现是自己的问题。更何况这是一个1500+ star的库。</p><p>首先我想到的是，肉眼看上去同样的body，为什么得到不同的结果？很可能是encoding的问题。单步调试后发现库里并没有任何encoding的动作，所以排除该问题。</p><p>后来我注意到，第三方库在发送请求的时候发了很多header，把这些header也写进postman之后，果然返回了同样的错误。而之前同事测试时，postman里header都是默认值。所以可以肯定问题出在header上。</p><p>删除了<code>SOAPAction</code>这个header之后，请求就成功了。再具体到库里去搜这个<code>SOAPAction</code>，发现有一段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!this.wsdl.options.forceSoap12Headers) &#123;</span><br><span class="line">  headers.SOAPAction = &apos;&quot;&apos; + soapAction + &apos;&quot;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>猜测应该是有一个<code>forceSoap12Headers</code>相关的设置，再去文档里一搜，果然有，把这个设置为<code>true</code>之后，问题就解决了。前后大概花了一小时。</p><p>写这篇是想说，磨刀不误砍柴工，首先你得学会怎么磨刀，然后得学会怎么砍柴，这样才能磨刀不误砍柴工。对于一个完全不熟悉的东西，因为掌握了最基本的方法，才能万物归一的去解决。</p><p>我反对对于不熟悉的东西，一上来就通看文档。在工作当中，是没有那么多时间让你从头去看文档，把所有东西都弄明白之后才开始工作的。<br>文档对于没有经验的人来说看quick start部分就够，因为就算看到<code>forceSoap12Headers</code>，也不知道是干什么用的。<br>对于有经验的人，才会需要在一开始就去细看<code>forceSoap12Headers</code>的设置</p><p>我也反对把写一种语言的员工强行安排暂时写另一种语言。除非是打算长期转向另一种语言，否则一两天做完一个task，根本不会对新的语言有系统性的研究，甚至都不知道debug的工具怎么用，对个人的发展是没什么实质性的帮助的，而且写出来的代码大都只能达到“能用”的程度，可维护性和稳定性都不一定会好，长远来看对公司也是不太好的。不过创业公司嘛，半年一次revamp，好像也没什么问题…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不知道为什么，我是比较喜欢JS这种脑残语言的，并且也不想将其他语言用在工作中，比如PHP、PYTHON、JAVA之类的。&lt;/p&gt;
&lt;p&gt;其实到最后肯定所有语言都是相通的，比如每种语言都会有自己的&lt;code&gt;lodash&lt;/code&gt;、&lt;code&gt;npm&lt;/code&gt;、&lt;co
      
    
    </summary>
    
      <category term="心得体会" scheme="https://sabrinaluo.github.io/tech/categories/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"/>
    
    
      <category term="forceSoap12Headers" scheme="https://sabrinaluo.github.io/tech/tags/forceSoap12Headers/"/>
    
      <category term="soap" scheme="https://sabrinaluo.github.io/tech/tags/soap/"/>
    
  </entry>
  
  <entry>
    <title>openvpn在mac下的一点问题</title>
    <link href="https://sabrinaluo.github.io/tech/2017/01/03/vpn/"/>
    <id>https://sabrinaluo.github.io/tech/2017/01/03/vpn/</id>
    <published>2017-01-03T06:42:57.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<p>今天才发现自从买了新Mac之后根本没有用新电脑写过什么东西，导致我今天居然还要<code>npm install</code>才能跑起来HEXO，真是不知道有多懒。</p><p>作为一个在墙外居住了好几年的人，只知道用Unblock youku翻墙进墙内去看视频，根本不知道在墙内怎么翻出来。早些年的时候，翻到墙外是很简单的，免费的软件也很多，好像也不用VPN啥，host文件里加几个IP啥的就能上Google了，现在真是门槛越来越高了呢……回一趟内地80%我平时上的网站都上不去，公司的网站也上不去，反正根本没法work from home，幸好我是在过年前发现了这个问题，现在还来得及解决一下，不然就呵呵呵呵……</p><p>以前好像也用过<code>.ovpn</code>文件，用命令行跑一下，就连上了vpn，现在已经不记得是怎么用了的…今天忽然发现公司居然有openvpn，妈妈再也不用担心我在内地没法工作了，对的，我的心里只有工作！:P</p><p>通常公司提供的openvpn服务都会有一个portal，也就是有个网址，进入之后需要登录公司提供的账号，然后下载相应的客户端，之后基本上是无脑使用……反正我到现在也不知道我电脑上的credentials是怎么生成的。</p><p>然而高贵的mac总是有各种各样的问题，装好openvpn connect之后居然连接错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fails: Error running jsondialog</span><br></pre></td></tr></table></figure></p><p>查了一下这是因为mac下的一个什么<code>csrutil</code>保护机制出于enable状态，<code>csrutil status</code>可查看。而disable这个东西需要在recovery mode下跑命令才行……真是麻烦呢。</p><ul><li>重启电脑，按住cmd+r键进入recovery mode</li><li>开头会让选个语言，选完之后会出来一个对话框，里面有好多选项，一个都不要选！</li><li>在顶部的工具条中点击utilities，然后选terminal</li><li>在命令行工具中执行<code>csrutil disable; reboot</code></li><li>重启之后就能连接上了</li></ul><p>参考：<br>[1]<a href="https://forums.openvpn.net/viewtopic.php?t=19879" target="_blank" rel="noopener">https://forums.openvpn.net/viewtopic.php?t=19879</a><br>[2]<a href="http://osxdaily.com/2015/10/05/disable-rootless-system-integrity-protection-mac-os-x/" target="_blank" rel="noopener">http://osxdaily.com/2015/10/05/disable-rootless-system-integrity-protection-mac-os-x/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天才发现自从买了新Mac之后根本没有用新电脑写过什么东西，导致我今天居然还要&lt;code&gt;npm install&lt;/code&gt;才能跑起来HEXO，真是不知道有多懒。&lt;/p&gt;
&lt;p&gt;作为一个在墙外居住了好几年的人，只知道用Unblock youku翻墙进墙内去看视频，根本不知
      
    
    </summary>
    
    
      <category term="VPN" scheme="https://sabrinaluo.github.io/tech/tags/VPN/"/>
    
      <category term="openvpn" scheme="https://sabrinaluo.github.io/tech/tags/openvpn/"/>
    
      <category term="翻墙" scheme="https://sabrinaluo.github.io/tech/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>一些js小技巧</title>
    <link href="https://sabrinaluo.github.io/tech/2016/10/19/some-js-tricks/"/>
    <id>https://sabrinaluo.github.io/tech/2016/10/19/some-js-tricks/</id>
    <published>2016-10-19T07:08:33.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<p>一直以为这篇已经发过了，结果前两天搜的时候发现搜不到。一直扔在草稿里，今天整理一下之前和最近学到的一些JS小技巧</p><h3 id="利用位运算取整"><a href="#利用位运算取整" class="headerlink" title="利用位运算取整"></a>利用位运算取整</h3><p>利用位运算，与、或、异或、左右移位，<code>&amp;</code> <code>|</code> <code>^</code> <code>&gt;&gt;</code> <code>&gt;&gt;&gt;</code> <code>&lt;&lt;</code> ，舍去小数点后的数字<a href="http://www.cnblogs.com/kkun/archive/2012/01/30/2332309.html" target="_blank" rel="noopener">^1</a>，<a href="http://jsperf.com/coercion-vs-casting/3" target="_blank" rel="noopener">jsPerf</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = 6.54321;</span><br><span class="line">console.log(a | 0); //6</span><br><span class="line">console.log(a &amp; 0); //6</span><br></pre></td></tr></table></figure></p><blockquote><p>按位<strong>非非</strong>运算也是可以的，所以你也可以用<strong>呻吟号</strong>把代码写成这样<code>~~a</code></p></blockquote><h3 id="字符串转换为数字"><a href="#字符串转换为数字" class="headerlink" title="+ 字符串转换为数字"></a>+ 字符串转换为数字</h3><p>利用加号 <code>+</code> 将数字字符串转换为数字类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = &quot;56789&quot;;</span><br><span class="line">var b = +a;</span><br><span class="line">console.log(typeof b); //number</span><br><span class="line">console.log(b); //56789</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>只能是十进制</li><li>如果<code>a</code>是非数字字符串，则会返回<code>NaN</code></li></ul></blockquote><h3 id="强制转换为布林类型"><a href="#强制转换为布林类型" class="headerlink" title="!! 强制转换为布林类型"></a>!! 强制转换为布林类型</h3><p>利用<code>!!</code>将变量类型强制转换为<code>boolean</code>类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a=123;</span><br><span class="line">typeof a; //nmuber</span><br><span class="line">typeof !!a; //boolean</span><br></pre></td></tr></table></figure><h3 id="避免can-not-read-property-‘xxx’-of-null的小技巧"><a href="#避免can-not-read-property-‘xxx’-of-null的小技巧" class="headerlink" title="避免can not read property ‘xxx’ of null的小技巧"></a>避免<code>can not read property ‘xxx’ of null</code>的小技巧</h3><p>经常会遇到的一个情况是下面的代码会报错<code>can not read property &#39;c&#39; of null</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(a.b.c === 1)&#123;</span><br><span class="line">    //do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以前自己的写法以及经常见到的写法是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(a &amp;&amp; a.b &amp;&amp; a.b.c === 1)&#123;</span><br><span class="line">    //do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前几天看到一个逼格很高的写法，不过我觉得括号太多了，容易写错，而且也没有上面的那种写法简单。不过还是要记录一下，以免以后见到不知道是什么意思。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(((a||&#123;&#125;).b||&#123;&#125;).c === 1)&#123;</span><br><span class="line">    //do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置默认值"><a href="#设置默认值" class="headerlink" title="|| 设置默认值"></a>|| 设置默认值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function abc(a, b)&#123;</span><br><span class="line">    a = a || 1; </span><br><span class="line">    b = b || 2;</span><br><span class="line"></span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abc(); //3</span><br><span class="line">abc(5); //7</span><br></pre></td></tr></table></figure><p>有一些情况下函数中需要设置默认值，经常看到有人的写法是<code>typeof</code>先判断这个参数是不是<code>undefined</code>然后再赋值，这种写法实在是太麻烦了……上面的是懒人写法</p><p>感觉善用<code>||</code>和<code>&amp;&amp;</code>还是能搞出很多黑科技的。</p><p>以上，是为打酱油博客一篇。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直以为这篇已经发过了，结果前两天搜的时候发现搜不到。一直扔在草稿里，今天整理一下之前和最近学到的一些JS小技巧&lt;/p&gt;
&lt;h3 id=&quot;利用位运算取整&quot;&gt;&lt;a href=&quot;#利用位运算取整&quot; class=&quot;headerlink&quot; title=&quot;利用位运算取整&quot;&gt;&lt;/a&gt;利
      
    
    </summary>
    
      <category term="JS" scheme="https://sabrinaluo.github.io/tech/categories/JS/"/>
    
    
      <category term="js" scheme="https://sabrinaluo.github.io/tech/tags/js/"/>
    
      <category term="tricks" scheme="https://sabrinaluo.github.io/tech/tags/tricks/"/>
    
      <category term="js小技巧" scheme="https://sabrinaluo.github.io/tech/tags/js%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>CSS的几个小技巧：pointer-events, transform垂直居中,nth-child</title>
    <link href="https://sabrinaluo.github.io/tech/2016/09/20/some-css-tricks/"/>
    <id>https://sabrinaluo.github.io/tech/2016/09/20/some-css-tricks/</id>
    <published>2016-09-20T08:44:46.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>千万不要用没有自动保存功能的编辑器！千万不要用没有自动保存功能的编辑器！千万不要用没有自动保存功能的编辑器！:(</p></blockquote><p>好久没有写什么东西了，可能是因为最近一直做的事情都是在重复搬砖，没有什么新鲜的东西…更可能是因为太懒了…</p><p>总结一下前段时间学到的几个css小技巧，以免过几天又忘记了</p><h3 id="CSS控制超链接是否可点击：pointer-event"><a href="#CSS控制超链接是否可点击：pointer-event" class="headerlink" title="CSS控制超链接是否可点击：pointer-event"></a>CSS控制超链接是否可点击：pointer-event</h3><p>一开始我听说CSS可以disable超链接的时候我是拒绝的，因为通常在有<code>href</code>属性的时候，都是用js来禁止超链接的。<br>然鹅…CSS里居然有pointer-events<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/pointer-events" target="_blank" rel="noopener">^1</a>这种黑科技！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&#123;</span><br><span class="line">    pointer-events: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="transform-垂直居中-2"><a href="#transform-垂直居中-2" class="headerlink" title="transform 垂直居中 ^2"></a>transform 垂直居中 <a href="http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/" target="_blank" rel="noopener">^2</a></h3><p>CSS垂直居中一直是一个蛋疼的问题，常常需要用到，却没有一个所有浏览器，在所有情况下都适用的解决方案。等我以后有空了，应该专门写一篇讨论CSS垂直居中各种解决方案的博客……别问我以后是什么时候…XD<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.bbb&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    transform: translateY(-50%);</span><br><span class="line">    top: 50%</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;aaa&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;bbb&quot;&gt;qqq&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h3 id="nth-child"><a href="#nth-child" class="headerlink" title="nth-child"></a>nth-child</h3><p>通常一个列表里，总是回遇到需要高亮某几个item的情况，CSS居然还可以通过公式来控制样式，我又涨姿势了。</p><p>以前只知道可以控制奇数偶数这种简单的，后来发现，只要是有规律的，能够写成an+b的公式，都可以适用<code>nth-child</code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child" target="_blank" rel="noopener">^3</a></p><ul><li><code>li:nth-child(even)</code> 选中偶数</li><li><code>li:nth-child(odd)</code> 选中奇数</li><li><code>li:nth-child(3n+2)</code> 从第2个开始，每3个选中一个</li><li><code>li:nth-child(3)</code> 直选中第3个</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;千万不要用没有自动保存功能的编辑器！千万不要用没有自动保存功能的编辑器！千万不要用没有自动保存功能的编辑器！:(&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好久没有写什么东西了，可能是因为最近一直做的事情都是在重复搬砖，没有什么新鲜的东西…更可能是
      
    
    </summary>
    
      <category term="CSS" scheme="https://sabrinaluo.github.io/tech/categories/CSS/"/>
    
    
      <category term="css" scheme="https://sabrinaluo.github.io/tech/tags/css/"/>
    
      <category term="tricks" scheme="https://sabrinaluo.github.io/tech/tags/tricks/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins集成github pull request插件</title>
    <link href="https://sabrinaluo.github.io/tech/2016/07/14/jenkins-github-pull-request-builder/"/>
    <id>https://sabrinaluo.github.io/tech/2016/07/14/jenkins-github-pull-request-builder/</id>
    <published>2016-07-14T06:41:02.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<p>前不久给bootstrap提了个<a href="https://github.com/twbs/bootstrap/issues/19997" target="_blank" rel="noopener">issue</a>，然后被他们的高科技自动回复机器人吓萌比了。<br>有印象之前给，某些repo提PR的时候，如果是用的Travis CI，也会有相应的提示该PR是否pass了所有test case。</p><p>如果使用cloud based CI，很多功能都已经整合了，所以可以很方便的使用。如上travis的例子，只要在travis配置里开启pull request选项，允许PR过来的时候自动跑测试，就可以实现。</p><p>然而，如果使用的是jenkins这种自己服务器上的CI，配置就稍微有点麻烦了。</p><h3 id="整合push和jenkins"><a href="#整合push和jenkins" class="headerlink" title="整合push和jenkins"></a>整合push和jenkins</h3><p>github repo页面 &gt; Settings &gt; webhooks &amp; services</p><p>这里有两个选项：</p><ol><li>add webhook，可自定义触发事件，可定制程度较高</li><li>add service，选好对应的服务，只填一个url即可，可定制程度较低。</li></ol><p>第一个比较复杂，但是点进去看看有哪些选项也就比较清晰明了大概用法了。<br>第二个，如果使用jenkins，需要你的jenkins服务器装有对应的插件。</p><p>整个流程的原理是，当github收到任何事件（比如push, pr等等），就会将对应的信息发送到你填的那个url中。这个url是你jenkins服务器用来接受信息的。Jenkins收到信息之后，就会根据job的配置做相应的事情，比如构建、测试、部署等等。</p><h3 id="整合pull-request"><a href="#整合pull-request" class="headerlink" title="整合pull request"></a>整合pull request</h3><p>这里重点说一下怎么整合jenkins和github的pull request，<strong>实现每当有pull request时，触发CI跑测试，并将测试结果显示在github上</strong>。</p><p>这里需要分别在github和jenkins做相应的设置。</p><p>github中的设置与上部分提到的相同，主要是填url</p><p>jenkins服务器中：<br>首先需要安装 <a href="https://wiki.jenkins-ci.org/display/JENKINS/GitHub+pull+request+builder+plugin" target="_blank" rel="noopener">github pull request builder plugin</a></p><p>添加用户名、密码、token等等credentials相关的需要在jenkins的管理面板添加</p><ul><li>source code management，除基本选项外，需要填写advanced选项。<ul><li>repo name: <code>origin</code></li><li>repo refspec: <code>+refs/pull/*:refs/remotes/origin/pr/*</code></li><li>repository browser 选择githubweb</li></ul></li><li>Build Triggers:<ul><li>勾选 Github Pull Request Builder</li><li>勾选 Use github hooks for build triggering</li><li>Admin List里可以填写github用户名，这样该用户就会有对应的权限</li><li>advanced选项中，需要在White List以及List of organizetions填写相应的用户名，这样PR才能被自动build，不在白名单里的用户提交的pr需要管理员审核后才会build</li><li>如果没有勾选 Build every pull request automatically without asking (Dangerous!)，每次有pr时，机器人账号会自动评论<em>“Can one of the admins verify this patch?”</em>，之后管理员回复相应的语句来触发Jenkins操作<ul><li>“ok to test” 允许该pr之后自动触发jenkins build</li><li>“test this please” 只build一次，该pr之后的改动不会自动触发Build</li><li>“add to whitelist” 将该pr的作者假如白名单</li><li>“retest this please” 重新bulid一次<br><strong>其他选项都保持默认不要更改！</strong></li></ul></li></ul></li><li>构建、环境相关的设置例如<code>npm install</code> <code>npm test</code>等，跟平时一样即可。</li></ul><p>最后保存设置，提交一个pr，如果设置都正确的话，在提交pr的页面将能看到一个“正在checking…”的提示，当测试跑完之后将能看到check passed或者check failed。另外也能够在pr overview页面看到pr后面会有个绿色的小勾或红色的小叉。</p><p>于是谁提交的pr不通过测试就能一目了然，再也不用帮别人fix test case啦！</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://jakubstas.com/github-and-jenkins-pull-request-checking" target="_blank" rel="noopener">http://jakubstas.com/github-and-jenkins-pull-request-checking</a><br><a href="http://jakubstas.com/github-and-jenkins-integration" target="_blank" rel="noopener">http://jakubstas.com/github-and-jenkins-integration</a><br><a href="https://www.theguild.nl/building-github-pull-requests-with-jenkins" target="_blank" rel="noopener">https://www.theguild.nl/building-github-pull-requests-with-jenkins</a><br><a href="https://wiki.jenkins-ci.org/display/JENKINS/GitHub+pull+request+builder+plugin" target="_blank" rel="noopener">https://wiki.jenkins-ci.org/display/JENKINS/GitHub+pull+request+builder+plugin</a><br><a href="https://github.com/jenkinsci/ghprb-plugin" target="_blank" rel="noopener">https://github.com/jenkinsci/ghprb-plugin</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前不久给bootstrap提了个&lt;a href=&quot;https://github.com/twbs/bootstrap/issues/19997&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;issue&lt;/a&gt;，然后被他们的高科技自动回复机器人吓萌比了。&lt;b
      
    
    </summary>
    
      <category term="DEVOPS" scheme="https://sabrinaluo.github.io/tech/categories/DEVOPS/"/>
    
    
      <category term="github" scheme="https://sabrinaluo.github.io/tech/tags/github/"/>
    
      <category term="持续集成" scheme="https://sabrinaluo.github.io/tech/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="jenkins" scheme="https://sabrinaluo.github.io/tech/tags/jenkins/"/>
    
      <category term="CI" scheme="https://sabrinaluo.github.io/tech/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>微博开放平台的Basic Auth和OAuth2.0认证</title>
    <link href="https://sabrinaluo.github.io/tech/2016/06/20/intro-of-oauth2-0/"/>
    <id>https://sabrinaluo.github.io/tech/2016/06/20/intro-of-oauth2-0/</id>
    <published>2016-06-20T09:59:09.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章不是讲各种认证方式是怎么实现的，只是简单的介绍如何与微博进行整合。</p><p>微博开放平台允许使用api来开发一些与微博相关的应用，微博提供<strong>Basic Auth</strong>和<strong>OAuth2.0</strong>两种认证方式，其中Basic Auth只能用于测试环境。</p><h3 id="Basic-Auth"><a href="#Basic-Auth" class="headerlink" title="Basic Auth"></a>Basic Auth</h3><p>跟名字一样，就是很基本很简单。其本质是使用<code>username:password</code>进行<code>base64</code>加密之后得到一个token，然后发送的请求中添加一个header <code>Authorization: Basic token</code>。</p><h3 id="OAuth-2-0"><a href="#OAuth-2-0" class="headerlink" title="OAuth 2.0"></a>OAuth 2.0</h3><p>生产环境中，微博只允许使用这种认证方式，这个比起直接用用户名和密码就要复杂一些。</p><p>简单的来说OAuth2.0认证的流程大概是这样：</p><ol><li>首先发一个请求去微博，告诉它，我要登陆啦</li><li>然后微博返回一个登录页面，等待用户用微博账号登陆</li><li>用户登陆之后，页面会跳转到<strong>授权回调页</strong>，这个页面的url会有一个query是<code>code=</code>，后面跟着的一串code</li><li>当进行其他api调用时，在api后加上query<code>code=xxx</code>以及其他要求的参数，比如<code>client_id</code>，<code>client_key</code>等等即可进行调用</li></ol><ul><li>开放平台&gt;我的应用&gt;应用信息&gt;基本信息，这里能看到app key和 app token</li><li>开放平台&gt;我的应用&gt;应用信息&gt;高级信息，这里需要填写授权回调页和取消授权回调页</li></ul><p>需要注意的是，在第2步和第3步中，授权回调页的链接一定要和在申请app时填写的<strong>一！模！一！样！</strong>，否则会报错。</p><p>比如在app填写的是<code>http://example.com/auth/</code>，而api请求时参数写为<code>http://example.com/auth</code>，少了个斜杠都是错的…</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1] <a href="http://open.weibo.com/wiki/Oauth2/authorize" target="_blank" rel="noopener">http://open.weibo.com/wiki/Oauth2/authorize</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章不是讲各种认证方式是怎么实现的，只是简单的介绍如何与微博进行整合。&lt;/p&gt;
&lt;p&gt;微博开放平台允许使用api来开发一些与微博相关的应用，微博提供&lt;strong&gt;Basic Auth&lt;/strong&gt;和&lt;strong&gt;OAuth2.0&lt;/strong&gt;两种认证方式，其
      
    
    </summary>
    
      <category term="AUTH" scheme="https://sabrinaluo.github.io/tech/categories/AUTH/"/>
    
    
      <category term="OAuth2.0" scheme="https://sabrinaluo.github.io/tech/tags/OAuth2-0/"/>
    
  </entry>
  
  <entry>
    <title>利用travis进行heroku部署</title>
    <link href="https://sabrinaluo.github.io/tech/2016/06/02/travis-heroku/"/>
    <id>https://sabrinaluo.github.io/tech/2016/06/02/travis-heroku/</id>
    <published>2016-06-02T07:27:46.000Z</published>
    <updated>2018-05-31T02:23:25.985Z</updated>
    
    <content type="html"><![CDATA[<p>好久么有写东西了，总感觉一直忙的跟狗一样，身心俱疲，但是又不知道到底在忙什么。</p><p>最近实践了一下利用travis部署到heroku的流程，又莫名其妙的尝试了新的编辑器atom，安装了markdown-preview-plus插件，当然要来写点东西试一试， 也不知道英文的linux下到底是什么问题，webstorm和sublime居然不能打中文，所以之前每次写东西都要去简书边预览边写。</p><p>atom还是很好用的，可能因为我（后）天生就对JS写的东西有好感，记不住快捷键的我，不能徒手写html的我还是需要IDE的帮助，atom就用来写点简单的东西吧。</p><p>travis和heroku都有自己的命令行工具（CLI），尤其travis cli用起来总比徒手写.travis.yml方便许多</p><h3 id="安装travis-cli"><a href="#安装travis-cli" class="headerlink" title="安装travis-cli"></a>安装travis-cli</h3><p>travis-cli是ruby写的，所以安装之前需要安装ruby</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ruby-full</span><br></pre></td></tr></table></figure><p>详细的安装教程可以看官方的这个<a href="https://github.com/travis-ci/travis.rb#installation" target="_blank" rel="noopener">https://github.com/travis-ci/travis.rb#installation</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install travis -v 1.8.2 --no-rdoc --no-ri</span><br></pre></td></tr></table></figure><h3 id="安装heroku-cli"><a href="#安装heroku-cli" class="headerlink" title="安装heroku-cli"></a>安装heroku-cli</h3><p>heroku-cli也是ruby写的……有点不懂为啥都喜欢用ruby写cli？js不是挺好的吗，有啥cli是<code>npm install -g</code> 解决不了的吗？…<br>具体的安装教程看</p><ul><li><a href="https://toolbelt.heroku.com" target="_blank" rel="noopener">https://toolbelt.heroku.com</a></li><li><a href="https://devcenter.heroku.com/articles/heroku-command#installing-the-heroku-cli" target="_blank" rel="noopener">https://devcenter.heroku.com/articles/heroku-command#installing-the-heroku-cli</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O- https://toolbelt.heroku.com/install-ubuntu.sh | sh</span><br></pre></td></tr></table></figure><h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis login</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku login</span><br></pre></td></tr></table></figure><h3 id="travis-yml"><a href="#travis-yml" class="headerlink" title=".travis.yml"></a>.travis.yml</h3><p>在项目的根目录下执行以下命令，将会生成<code>.travis.yml</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">travis init</span><br><span class="line">travis setup heroku</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：一定要通过命令行登陆heroku，否则travis会卡住，也不报错啥的反正就一直没反应</p></blockquote><p>打开<code>.travis.yml</code>文件可以看到除了基本的信息之外，还有<code>deploy</code>相关的信息，其中比较让人疑惑的是<code>api_key</code>，这个<code>api_key</code>其实是你的heroku账户的token加密之后的一个字符串。heroku的token看起来是一个类似uuid5的字符串，可以通过以下命令查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku auth:token</span><br></pre></td></tr></table></figure></p><p>有一个问题我不太明白的是，之前用travis加密文件<code>travis encrypt-file path/of/file --add</code>的时候，可以在travis网站对应repo的setting里看到多出的环境变量，用来加密的key value，然后需要用<code>openssl</code>命令来解密。</p><p>但加密heroku的token后，并没有生成任何新的环境变量，而且也无需在<code>.travis.yml</code>中执行解密的相关操作。</p><p>那么用来加密的key value到底存在哪里了呢？！</p><h3 id="为什么要在travis做部署，而不直接利用heroku提供的github自动部署？"><a href="#为什么要在travis做部署，而不直接利用heroku提供的github自动部署？" class="headerlink" title="为什么要在travis做部署，而不直接利用heroku提供的github自动部署？"></a>为什么要在travis做部署，而不直接利用heroku提供的github自动部署？</h3><p>首先，heroku似乎不能跑测试…</p><p>其实，大多数简单的项目其实都可以用github的方式，如果需要编译和生成的，都在<code>package.json</code>里添加<code>prepublish</code>脚本即可</p><p>我这次又是搞了一个奇怪的事情，做了一个前后端分离项目，后端提供RESTful API,前端是SPA，但是又想把SPA和API放在同一个服务器，而且分了两个repo来放前端和后端。</p><p>所以我的需求是，当前端或后端push之后，trigger travis去把前后端都克隆下来，并且编译和Build前端代码，放到指定文件夹，然后部署。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久么有写东西了，总感觉一直忙的跟狗一样，身心俱疲，但是又不知道到底在忙什么。&lt;/p&gt;
&lt;p&gt;最近实践了一下利用travis部署到heroku的流程，又莫名其妙的尝试了新的编辑器atom，安装了markdown-preview-plus插件，当然要来写点东西试一试， 也不知
      
    
    </summary>
    
      <category term="DEVOPS" scheme="https://sabrinaluo.github.io/tech/categories/DEVOPS/"/>
    
    
      <category term="travis" scheme="https://sabrinaluo.github.io/tech/tags/travis/"/>
    
      <category term="自动部署" scheme="https://sabrinaluo.github.io/tech/tags/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    
      <category term="持续集成" scheme="https://sabrinaluo.github.io/tech/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="heroku" scheme="https://sabrinaluo.github.io/tech/tags/heroku/"/>
    
  </entry>
  
</feed>
